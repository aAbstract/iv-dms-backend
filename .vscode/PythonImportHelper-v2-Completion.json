[
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "database.mongo_driver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskStatus",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskType",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "FlowReport",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReportStatus",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportItem",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportSubSectionWritten",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChange",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChangeType",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportTemplate",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportSubSection",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReport",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReportStatus",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportItem",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportSubSectionWritten",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChange",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChangeType",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "AuditorActions",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FinalComment",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReportStatus",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChangeType",
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "isExtraImport": true,
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "IOSASection",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationsMetaData",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSASection",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "aiofiles.os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles.os",
        "description": "aiofiles.os",
        "detail": "aiofiles.os",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FILE_TYPE_PATH_MAP",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexTree",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFileTree",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexTree",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "lib.log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.log",
        "description": "lib.log",
        "detail": "lib.log",
        "documentation": {}
    },
    {
        "label": "GPT35TMessage",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TContext",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditTag",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditTag",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "UnstructuredManual",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManualMetaData",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "motor.motor_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "ServerApi",
        "importPath": "pymongo.server_api",
        "description": "pymongo.server_api",
        "isExtraImport": true,
        "detail": "pymongo.server_api",
        "documentation": {}
    },
    {
        "label": "lib.crypto",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "database.fs_index_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.fs_index_database_api",
        "description": "database.fs_index_database_api",
        "detail": "database.fs_index_database_api",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "database.ai_tasks_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.ai_tasks_database_api",
        "description": "database.ai_tasks_database_api",
        "detail": "database.ai_tasks_database_api",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "computed_field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "lib.security",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.security",
        "description": "lib.security",
        "detail": "lib.security",
        "documentation": {}
    },
    {
        "label": "database.activity_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.activity_database_api",
        "description": "database.activity_database_api",
        "detail": "database.activity_database_api",
        "documentation": {}
    },
    {
        "label": "database.users_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.users_database_api",
        "description": "database.users_database_api",
        "detail": "database.users_database_api",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "database.flow_report_database_api",
        "description": "database.flow_report_database_api",
        "isExtraImport": true,
        "detail": "database.flow_report_database_api",
        "documentation": {}
    },
    {
        "label": "database.regulations_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.regulations_database_api",
        "description": "database.regulations_database_api",
        "detail": "database.regulations_database_api",
        "documentation": {}
    },
    {
        "label": "database.gpt35t_contexts_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.gpt35t_contexts_database_api",
        "description": "database.gpt35t_contexts_database_api",
        "detail": "database.gpt35t_contexts_database_api",
        "documentation": {}
    },
    {
        "label": "lib.gpt_35t_unstruct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.gpt_35t_unstruct",
        "description": "lib.gpt_35t_unstruct",
        "detail": "lib.gpt_35t_unstruct",
        "documentation": {}
    },
    {
        "label": "lib.gpt_35t_struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "database.manuals_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.manuals_database_api",
        "description": "database.manuals_database_api",
        "detail": "database.manuals_database_api",
        "documentation": {}
    },
    {
        "label": "lib.chat_doc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.chat_doc",
        "description": "lib.chat_doc",
        "detail": "lib.chat_doc",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "isExtraImport": true,
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "isExtraImport": true,
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "isExtraImport": true,
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "code",
        "description": "code",
        "detail": "code",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "readline",
        "description": "readline",
        "detail": "readline",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "_test_config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_test_config",
        "description": "_test_config",
        "detail": "_test_config",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "auth_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "manuals_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "activity_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "regulations_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "llm_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "ai_tasks_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "attachments_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "flow_report_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "_PUBLIC_DIR",
        "kind": 5,
        "importPath": "database.fs_index_database_api",
        "description": "database.fs_index_database_api",
        "peekOfCode": "_PUBLIC_DIR = \"public\"\nasync def create_fs_index_entry(\n    username: str,\n    organization: str,\n    file_type: IndexFileType,\n    filename: str,\n    data: bytes,\n    chat_doc_uuid: str = \"00000000-0000-0000-0000-000000000000\",\n) -> ServiceResponse:\n    # check if index entry already exists",
        "detail": "database.fs_index_database_api",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "peekOfCode": "def get_database() -> maio.core.AgnosticDatabase | None:\n    if mdb_client:\n        return mdb_client.get_database(os.environ['IVDMS_DB'])\n    return None\ndef validate_bson_id(bson_id: str) -> ObjectId | None:\n    try:\n        return ObjectId(bson_id)\n    except:\n        return None",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "kind": 2,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "peekOfCode": "def validate_bson_id(bson_id: str) -> ObjectId | None:\n    try:\n        return ObjectId(bson_id)\n    except:\n        return None",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "create_jwt_token",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def create_jwt_token(data: Any) -> str:\n    return jwt.encode(data, _jwt_key, algorithm=\"HS512\")\ndef decode_jwt_token(token: str) -> dict[str, Any]:\n    return jwt.decode(token, _jwt_key, algorithms=['HS512'])\ndef hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "decode_jwt_token",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def decode_jwt_token(token: str) -> dict[str, Any]:\n    return jwt.decode(token, _jwt_key, algorithms=['HS512'])\ndef hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "LLMAuditScore",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMAuditScore(str, Enum):\n    IRRELEVANT = 'IRRELEVANT'\n    PARTIAL = 'PARTIAL'\n    DOCUMENTED = 'DOCUMENTED'\n    CONFORMITY = 'CONFORMITY'\n    NULL = 'NULL'\n    SERVER_ERROR = 'SERVER_ERROR'\nclass LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "LLMIOSAItemResponse",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'\n    score: str = 'NULL'\n    children: list['LLMIOSAItemResponse'] = []\nclass LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "LLMAuditResponse",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM\n    details: list[LLMIOSAItemResponse] = []\nscore_tags_text_map: dict[str, str] = {\n    LLMAuditScore.IRRELEVANT: \"The input regulation's topics are unrelated to the input manual\",\n    LLMAuditScore.PARTIAL: \"Some of the input regulation's topics are related to the input manual\",\n    LLMAuditScore.DOCUMENTED: \"The input regulations document all the topics mentioned in the manual\",",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "count_score_list_explain",
        "kind": 2,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "def count_score_list_explain(result: json):\n    summary = \"\"\n    total_keys = 0\n    score = 0\n    score_count_map: dict[str, int] = {\n        LLMAuditScore.IRRELEVANT.value: 0,\n        LLMAuditScore.PARTIAL.value: 0,\n        LLMAuditScore.DOCUMENTED.value: 0,\n        LLMAuditScore.CONFORMITY.value: 0,\n    }",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "agg_score",
        "kind": 2,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "peekOfCode": "def agg_score(items: list[GTP35TIOSAItemResponse]) -> GPT35TAuditScore:\n    \"\"\" computes GPT35T aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return GPT35TAuditScore.NONE\n    return GPT35TAuditScore(round(sum([item.score.value for item in items]) / len(items)))\ndef agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0\n    return sum([item.pct_score for item in items]) / len(items)",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "agg_pct_score",
        "kind": 2,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "peekOfCode": "def agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0\n    return sum([item.pct_score for item in items]) / len(items)\ndef parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "parse_scores_tree",
        "kind": 2,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "peekOfCode": "def parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(\n                GTP35TIOSAItemResponse(\n                    text=parent_text,\n                    score=agg_score(child_items),",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "gpt35t_parse_resp",
        "kind": 2,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "peekOfCode": "def gpt35t_parse_resp(llm_json_res: dict) -> GPT35TAuditResponse:\n    scores_tree = llm_json_res['compliance_scores']\n    comments = llm_json_res['comments']\n    suggestions = llm_json_res['suggestions']\n    modified = llm_json_res['modified']\n    details = parse_scores_tree(scores_tree)\n    return GPT35TAuditResponse(\n        score=agg_score(details),\n        pct_score=agg_pct_score(details),\n        comments=comments,",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "openai_client",
        "kind": 5,
        "importPath": "lib.gpt_35t_struct",
        "description": "lib.gpt_35t_struct",
        "peekOfCode": "openai_client = AsyncOpenAI(api_key=os.environ['GPT_35T_API_KEY'])\ndef agg_score(items: list[GTP35TIOSAItemResponse]) -> GPT35TAuditScore:\n    \"\"\" computes GPT35T aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return GPT35TAuditScore.NONE\n    return GPT35TAuditScore(round(sum([item.score.value for item in items]) / len(items)))\ndef agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0",
        "detail": "lib.gpt_35t_struct",
        "documentation": {}
    },
    {
        "label": "openai_client",
        "kind": 5,
        "importPath": "lib.gpt_35t_unstruct",
        "description": "lib.gpt_35t_unstruct",
        "peekOfCode": "openai_client = AsyncOpenAI(api_key=os.environ['GPT_35T_API_KEY'])\nasync def gpt35t_generate(iosa_checklist: str, input_text: str) -> ServiceResponse:\n    system_prompt = \"\"\"\n    We are two aviation professionals relying on you, our AI assistant for a critical and legally binding task.\n    Your role is pivotal as you conduct audits to ensure strict compliance with ISARPs.\n    Your meticulous evaluation of legal documents against ISARPs is crucial.\n    We entrust you with the responsibility of upholding legal standards in the aviation industry.\n    During an audit, an operator is assessed against the ISARPs contained in this manual. To determine conformity with any standard or recommended practice, an auditor will gather evidence to assess the degree to which specifications are documented and implemented by the operator. In making such an assessment, the following information is applicable.\n    \"\"\"\n    user_prompt = f\"\"\"",
        "detail": "lib.gpt_35t_unstruct",
        "documentation": {}
    },
    {
        "label": "_LOG_TAG_COLOR_MAP",
        "kind": 5,
        "importPath": "lib.log",
        "description": "lib.log",
        "peekOfCode": "_LOG_TAG_COLOR_MAP = {\n    'ERROR': f\"{colorama.Back.RED}[ERROR]{colorama.Style.RESET_ALL}\",\n    'INFO': '[INFO]',\n    'DEBUG': '[DEBUG]',\n}\ndef _format_log(log: Log):\n    return f\"[{log.datetime.strftime('%Y-%m-%d %H:%M:%S')}] {_LOG_TAG_COLOR_MAP[log.level]} [{log.source}] {log.description}\"\nasync def add_log(source: str, level: str, desc: str):\n    log = Log(\n        datetime=datetime.now(),",
        "detail": "lib.log",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "lib.pdf",
        "description": "lib.pdf",
        "peekOfCode": "def clean(text, allowed=list(string.printable)):\n    unicode_dashes = [\n        \"\\u2010\",  # hyphen\n        \"\\u2011\",  # non-breaking hyphen\n        \"\\u2012\",  # en dash\n        \"\\u2013\",  # en dash\n        \"\\u2014\",  # em dash\n        \"\\u2015\",  # horizontal bar\n        \"\\u2212\",  # minus sign\n        \"\\u301c\",  # wave dash",
        "detail": "lib.pdf",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 2,
        "importPath": "lib.pdf",
        "description": "lib.pdf",
        "peekOfCode": "def extract(path):\n    all_pages = []\n    reader = PdfReader(path)\n    pages = reader.pages\n    for i in pages:\n        parts = []\n        def visitor_body(text, cm, tm, fontDict, fontSize):\n            # crop the header and footer\n            y = tm[5]\n            if (y > 40) and (y < 742):",
        "detail": "lib.pdf",
        "documentation": {}
    },
    {
        "label": "AITaskStatus",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITaskStatus(str, Enum):\n    IN_PROGRESS = 'IN_PROGRESS'\n    FINISHED = 'FINISHED'\n    FAILD = 'FAILD'\nclass AITaskType(str, Enum):\n    COMPLIANCE_CHECK = 'COMPLIANCE_CHECK'\n    PARSING_PDF = 'PARSING_PDF'\n    SCANNING_PDF = 'SCANNING_PDF'\nclass AITask(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskType",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITaskType(str, Enum):\n    COMPLIANCE_CHECK = 'COMPLIANCE_CHECK'\n    PARSING_PDF = 'PARSING_PDF'\n    SCANNING_PDF = 'SCANNING_PDF'\nclass AITask(BaseModel):\n    id: Optional[str] = None\n    username: str\n    start_datetime: datetime\n    end_datetime: Optional[datetime]\n    task_type: AITaskType",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITask",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITask(BaseModel):\n    id: Optional[str] = None\n    username: str\n    start_datetime: datetime\n    end_datetime: Optional[datetime]\n    task_type: AITaskType\n    task_status: AITaskStatus\n    json_res: JsonResponse",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "ReportSubSection",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class ReportSubSection(BaseModel):\n    title: str\n    checklist_items: list[IOSAItem] = []\nclass ReportTemplate(BaseModel):\n    title: Optional[str] = None\n    type: RegulationType\n    applicability: str\n    general_guidance: str\n    sub_sections: list[ReportSubSection] = []\nclass FinalComment(str, Enum):",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportTemplate",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class ReportTemplate(BaseModel):\n    title: Optional[str] = None\n    type: RegulationType\n    applicability: str\n    general_guidance: str\n    sub_sections: list[ReportSubSection] = []\nclass FinalComment(str, Enum):\n    NOTDOCNOTIMP = \"Not Documented not Implemented (Finding)\"\n    DOCNOTIMP = \"Implemented not Documented (Finding)\"\n    NOTDOCIMP = \"Documented not Implemented (Finding)\"",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FinalComment",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class FinalComment(str, Enum):\n    NOTDOCNOTIMP = \"Not Documented not Implemented (Finding)\"\n    DOCNOTIMP = \"Implemented not Documented (Finding)\"\n    NOTDOCIMP = \"Documented not Implemented (Finding)\"\n    DOCIMP = \"Documented and Implemented (Conformity)\"\n    N_A = \"N/A\"\nclass AuditorActions(str, Enum):\n    IDENTIFIED = \"IDENTIFIED\"\n    INTERVIEWED = \"INTERVIEWED\"\n    EX_SYLLABI = \"EX_SYLLABI\"",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "AuditorActions",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class AuditorActions(str, Enum):\n    IDENTIFIED = \"IDENTIFIED\"\n    INTERVIEWED = \"INTERVIEWED\"\n    EX_SYLLABI = \"EX_SYLLABI\"\n    EX_TRAINING = \"EX_TRAINING\"\nclass ManualReference(BaseModel):\n    fs_index: str\n    pages: list[int] = []\nclass Checkin(BaseModel):\n    description: str",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ManualReference",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class ManualReference(BaseModel):\n    fs_index: str\n    pages: list[int] = []\nclass Checkin(BaseModel):\n    description: str\n    label: str\n    pages: Optional[list] = []\n    manual_references: Optional[dict] = {}\n    isComplying: Optional[bool]\n    isComplied: Optional[bool]",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "Checkin",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class Checkin(BaseModel):\n    description: str\n    label: str\n    pages: Optional[list] = []\n    manual_references: Optional[dict] = {}\n    isComplying: Optional[bool]\n    isComplied: Optional[bool]\n    comments: Optional[str]\n    pct_score: Optional[float|int]\n    context_id: Optional[str]",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportItem",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class ReportItem(BaseModel):\n    code: str\n    page: Optional[int] = None\n    checkins: Optional[list[Checkin]] = []\n    final_comment: Optional[FinalComment] = None\n    comments: Optional[str] = None\n    actions: list[AuditorActions] = []\n    other_actions : Optional[str] = None\n    fs_index: Optional[str] = None\n    url_path: Optional[str] = None",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "ReportSubSectionWritten",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class ReportSubSectionWritten(BaseModel):\n    title: str\n    checklist_items: list[ReportItem] = []\nclass FlowReportStatus(str, Enum):\n    CLOSED = \"CLOSED\"\n    REJECTED = \"REJECTED\"\n    INPROGRESS = \"IN-PROGRESS\"\n    DELETED = \"DELETED\"\nclass UserChangeType(str, Enum):\n    DELETE = \"DELETE\"",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReportStatus",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class FlowReportStatus(str, Enum):\n    CLOSED = \"CLOSED\"\n    REJECTED = \"REJECTED\"\n    INPROGRESS = \"IN-PROGRESS\"\n    DELETED = \"DELETED\"\nclass UserChangeType(str, Enum):\n    DELETE = \"DELETE\"\n    UPDATE = \"UPDATE\"\n    VIEW = \"VIEW\"\n    CREATE = \"CREATE\"",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChangeType",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class UserChangeType(str, Enum):\n    DELETE = \"DELETE\"\n    UPDATE = \"UPDATE\"\n    VIEW = \"VIEW\"\n    CREATE = \"CREATE\"\n    FORWARD = \"FORWARD\"\nclass UserChange(BaseModel):\n    user_name: str\n    user_comment: str = \"\"\n    change_type: UserChangeType",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "UserChange",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class UserChange(BaseModel):\n    user_name: str\n    user_comment: str = \"\"\n    change_type: UserChangeType\n    date: Optional[datetime] = datetime.now()\nclass FlowReport(BaseModel):\n    title: Optional[str] = None\n    regulation_id: str\n    code: str\n    sub_sections: list[ReportSubSectionWritten] = []",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReport",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class FlowReport(BaseModel):\n    title: Optional[str] = None\n    regulation_id: str\n    code: str\n    sub_sections: list[ReportSubSectionWritten] = []\n    status: FlowReportStatus\n    organization: str\n    creator: str\n    user_changes: list[UserChange] = []\nclass FlowReportChange(BaseModel):",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "FlowReportChange",
        "kind": 6,
        "importPath": "models.flow_reports",
        "description": "models.flow_reports",
        "peekOfCode": "class FlowReportChange(BaseModel):\n    report_id: str\n    organization: str\n    user_changes: list[UserChange] = []",
        "detail": "models.flow_reports",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class IndexFileType(str, Enum):\n    AIRLINES_MANUAL = 'AIRLINES_MANUAL'\n    AIRLINES_ATTACHMENT = 'AIRLINES_ATTACHMENT'\nFILE_TYPE_PATH_MAP = {\n    IndexFileType.AIRLINES_MANUAL: os.path.join('airlines_files', 'manuals'),\n    IndexFileType.AIRLINES_ATTACHMENT: os.path.join('airlines_files', 'attachments'),\n}\nclass ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'\n    PARSING_FAILD = 'PARSING_FAILD'\n    @classmethod\n    def map_status_code(cls, status_code: int) -> 'ChatDOCStatus':\n        if status_code == 300:\n            return cls.PARSED\n        elif status_code > 0:\n            return cls.PARSING",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class FSIndexFile(BaseModel):\n    id: Optional[str] = None\n    username: str\n    datetime: datetime\n    file_type: IndexFileType\n    filename: str\n    doc_uuid: str\n    doc_status: ChatDOCStatus\n    organization: str\n    parent:Optional[str] = \"\"",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexNode",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class FSIndexNode(BaseModel):\n    label: str\n    pages: list[int]\n    key:str\n    children: Optional[list['FSIndexNode']] = None\nclass FSIndexTree(BaseModel):\n    doc_uuid: str\n    label: str\n    children: Optional[list['FSIndexNode']] = None\n    key:str",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexTree",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class FSIndexTree(BaseModel):\n    doc_uuid: str\n    label: str\n    children: Optional[list['FSIndexNode']] = None\n    key:str\nclass FSIndexFileTree(BaseModel):\n    label: str\n    key:str\n    children: Optional[list['FSIndexTree']] = None",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFileTree",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class FSIndexFileTree(BaseModel):\n    label: str\n    key:str\n    children: Optional[list['FSIndexTree']] = None",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FILE_TYPE_PATH_MAP",
        "kind": 5,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "FILE_TYPE_PATH_MAP = {\n    IndexFileType.AIRLINES_MANUAL: os.path.join('airlines_files', 'manuals'),\n    IndexFileType.AIRLINES_ATTACHMENT: os.path.join('airlines_files', 'attachments'),\n}\nclass ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'\n    PARSING_FAILD = 'PARSING_FAILD'\n    @classmethod\n    def map_status_code(cls, status_code: int) -> 'ChatDOCStatus':",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditTag",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TAuditTag(str, Enum):\n    FULLY_COMPLIANT = \"Fully Compliant\"\n    PARTIALLY_COMPLIANT =  \"Partially Compliant\"\n    NON_COMPLIANT = \"Non Compliant\"\nclass GPT35TAuditScore(Enum):\n    FULLY_COMPLIANT = GPT35T_MAX_SCORE\n    PARTIALLY_COMPLIANT = GPT35T_MAX_SCORE - 1\n    NON_COMPLIANT = GPT35T_MAX_SCORE - 2\n    NONE = 0\n    @classmethod",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditScore",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TAuditScore(Enum):\n    FULLY_COMPLIANT = GPT35T_MAX_SCORE\n    PARTIALLY_COMPLIANT = GPT35T_MAX_SCORE - 1\n    NON_COMPLIANT = GPT35T_MAX_SCORE - 2\n    NONE = 0\n    @classmethod\n    def map_audit_score_lbl(cls, audit_score) -> str:\n        if audit_score == cls.FULLY_COMPLIANT:\n            return GPT35TAuditTag.FULLY_COMPLIANT\n        elif audit_score == cls.PARTIALLY_COMPLIANT:",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GTP35TIOSAItemResponse",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GTP35TIOSAItemResponse(BaseModel):\n    text: str\n    score: GPT35TAuditScore\n    pct_score: float\n    children: list['GTP35TIOSAItemResponse'] = []\n    @computed_field\n    @property\n    def score_tag(self) -> str:\n        return GPT35TAuditScore.map_audit_score_lbl(self.score)\n    @computed_field",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditResponse",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TAuditResponse(BaseModel):\n    score: GPT35TAuditScore\n    pct_score: float\n    comments: str\n    suggestions: str\n    modified: str\n    details: list[GTP35TIOSAItemResponse] = []\n    @computed_field\n    @property\n    def score_tag(self) -> str:",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35ContextRole",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35ContextRole(str, Enum):\n    SYSTEM = 'system'\n    USER = 'user'\n    ASSISTANT = 'assistant'\nclass GPT35TMessage(BaseModel):\n    role: GPT35ContextRole\n    content: str\n    model_config = ConfigDict(use_enum_values=True)\nclass GPT35TContext(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TMessage",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TMessage(BaseModel):\n    role: GPT35ContextRole\n    content: str\n    model_config = ConfigDict(use_enum_values=True)\nclass GPT35TContext(BaseModel):\n    id: Optional[str] = None\n    username: str\n    datetime: datetime\n    conversation: list[GPT35TMessage]\n    organization: str",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TContext",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TContext(BaseModel):\n    id: Optional[str] = None\n    username: str\n    datetime: datetime\n    conversation: list[GPT35TMessage]\n    organization: str",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35T_MAX_SCORE",
        "kind": 5,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "GPT35T_MAX_SCORE = 3\nclass GPT35TAuditTag(str, Enum):\n    FULLY_COMPLIANT = \"Fully Compliant\"\n    PARTIALLY_COMPLIANT =  \"Partially Compliant\"\n    NON_COMPLIANT = \"Non Compliant\"\nclass GPT35TAuditScore(Enum):\n    FULLY_COMPLIANT = GPT35T_MAX_SCORE\n    PARTIALLY_COMPLIANT = GPT35T_MAX_SCORE - 1\n    NON_COMPLIANT = GPT35T_MAX_SCORE - 2\n    NONE = 0",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "kind": 6,
        "importPath": "models.httpio",
        "description": "models.httpio",
        "peekOfCode": "class JsonResponse(BaseModel):\n    success: bool = True\n    msg: str = ''\n    data: dict = {}",
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "models.logs",
        "description": "models.logs",
        "peekOfCode": "class Log(BaseModel):\n    id: Optional[str] = None\n    datetime: datetime\n    level: str\n    source: str\n    description: str",
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "ManualRegulationCode",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualRegulationCode(BaseModel):\n    type: RegulationType\n    cat_code: str\n    code: str\n    model_config = ConfigDict(use_enum_values=True)\nclass ManualSection(BaseModel):\n    header: str\n    text: str\n    regulations_codes: list[ManualRegulationCode]\nclass ManualChapter(BaseModel):",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "ManualSection",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualSection(BaseModel):\n    header: str\n    text: str\n    regulations_codes: list[ManualRegulationCode]\nclass ManualChapter(BaseModel):\n    name: str\n    sections: list[ManualSection]\nclass StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "ManualChapter",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualChapter(BaseModel):\n    name: str\n    sections: list[ManualSection]\nclass StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    chapters: list[ManualChapter]\nclass UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "StructuredManual",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    chapters: list[ManualChapter]\nclass UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    pages: list[str]\nclass UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManual",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    pages: list[str]\nclass UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None\n    name: str\n    page_count: int",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManualMetaData",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None\n    name: str\n    page_count: int",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationType(str, Enum):\n    IOSA = 'IOSA'\n    ECAR = 'ECAR'\nclass Constrain(BaseModel):\n    text: str\n    children: list['Constrain'] = []\nclass IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "Constrain",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class Constrain(BaseModel):\n    text: str\n    children: list['Constrain'] = []\nclass IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []\n    paragraph: str\n    page: int\n    # constraints: list[Constrain]",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []\n    paragraph: str\n    page: int\n    # constraints: list[Constrain]\nclass IOSASection(BaseModel):\n    name: str\n    code: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSASection",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSASection(BaseModel):\n    name: str\n    code: str\n    applicability: str\n    guidance: Optional[str] = None\n    items: list[IOSAItem]\nclass IOSARegulation(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType = RegulationType.IOSA\n    name: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSARegulation",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSARegulation(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType = RegulationType.IOSA\n    name: str\n    effective_date: datetime\n    sections: list[IOSASection]\n    model_config = ConfigDict(use_enum_values=True)\nclass RegulationsMetaData(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationsMetaData",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationsMetaData(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType\n    name: str\n    effective_date: datetime\n    model_config = ConfigDict(use_enum_values=True)\nclass RegulationsSourceMap(BaseModel):\n    code: str\n    title: str\n    sub_section: list[str]",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationsSourceMap",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationsSourceMap(BaseModel):\n    code: str\n    title: str\n    sub_section: list[str]\n    regulation_id: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "kind": 6,
        "importPath": "models.runtime",
        "description": "models.runtime",
        "peekOfCode": "class ServiceResponse(BaseModel):\n    success: bool = True\n    status_code: int = 200\n    msg: str = ''\n    data: dict = {}",
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class UserRole(str, Enum):\n    ADMIN = 'ADMIN'\n    AUDITOR = 'AUDITOR'\n    AIRLINES = 'AIRLINES'\nclass User(BaseModel):\n    id: Optional[str] = None\n    username: str\n    disp_name: str\n    pass_hash: str\n    user_role: UserRole",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class User(BaseModel):\n    id: Optional[str] = None\n    username: str\n    disp_name: str\n    pass_hash: str\n    user_role: UserRole\n    phone_number: str\n    email: str\n    organization: str\n    model_config = ConfigDict(use_enum_values=True)",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/activity\"\n_MODULE_ID = 'routes.activity_api'\n_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_MODULE_ID = 'routes.activity_api'\n_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n\n    description: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n\n    description: string,\\n\n    datetime: Date,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/ai-tasks\"\n_MODULE_ID = 'routes.ai_tasks_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_MODULE_ID = 'routes.ai_tasks_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n\n    msg: string,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n\n    msg: string,\\n\n    data: Object,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.attachments_api",
        "description": "routes.attachments_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/attachments\"\n_MODULE_ID = 'routes.attachments_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-attachment\")\nasync def create_attachment(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Store attachment file in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    file_id: string,\\n\n    url_path: string,\\n",
        "detail": "routes.attachments_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.attachments_api",
        "description": "routes.attachments_api",
        "peekOfCode": "_MODULE_ID = 'routes.attachments_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-attachment\")\nasync def create_attachment(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Store attachment file in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    file_id: string,\\n\n    url_path: string,\\n\n    }}",
        "detail": "routes.attachments_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.attachments_api",
        "description": "routes.attachments_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-attachment\")\nasync def create_attachment(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Store attachment file in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    file_id: string,\\n\n    url_path: string,\\n\n    }}\n    \"\"\"",
        "detail": "routes.attachments_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.attachments_api",
        "description": "routes.attachments_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-attachment\")\nasync def create_attachment(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Store attachment file in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    file_id: string,\\n\n    url_path: string,\\n\n    }}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.create_attachment\"",
        "detail": "routes.attachments_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/auth\"\n_MODULE_ID = 'routes.auth_api'\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "_MODULE_ID = 'routes.auth_api'\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")\n    db_service_response = await users_database_api.login_user(username, password)",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")\n    db_service_response = await users_database_api.login_user(username, password)\n    res.status_code = db_service_response.status_code",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.flow_report_api",
        "description": "routes.flow_report_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/flow_report\"\n_MODULE_ID = \"routes.flow_report_api\"\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-flow-report\")\nasync def create_flow_report(\n    res: Response,\n    regulation_id: str = Body(embed=True),\n    title: str = Body(embed=True),\n    checklist_template_code: str = Body(embed=True),",
        "detail": "routes.flow_report_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.flow_report_api",
        "description": "routes.flow_report_api",
        "peekOfCode": "_MODULE_ID = \"routes.flow_report_api\"\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-flow-report\")\nasync def create_flow_report(\n    res: Response,\n    regulation_id: str = Body(embed=True),\n    title: str = Body(embed=True),\n    checklist_template_code: str = Body(embed=True),\n    x_auth=Header(alias=\"X-Auth\", default=None),",
        "detail": "routes.flow_report_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.flow_report_api",
        "description": "routes.flow_report_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-flow-report\")\nasync def create_flow_report(\n    res: Response,\n    regulation_id: str = Body(embed=True),\n    title: str = Body(embed=True),\n    checklist_template_code: str = Body(embed=True),\n    x_auth=Header(alias=\"X-Auth\", default=None),\n) -> FlowReport | Any:",
        "detail": "routes.flow_report_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.flow_report_api",
        "description": "routes.flow_report_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/create-flow-report\")\nasync def create_flow_report(\n    res: Response,\n    regulation_id: str = Body(embed=True),\n    title: str = Body(embed=True),\n    checklist_template_code: str = Body(embed=True),\n    x_auth=Header(alias=\"X-Auth\", default=None),\n) -> FlowReport | Any:\n    func_id = f\"{_MODULE_ID}.create_flow_report\"",
        "detail": "routes.flow_report_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/llm\"\n_MODULE_ID = 'routes.llm_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_MODULE_ID = 'routes.llm_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n\n    score_tag: 'FULLY_COMPLIANT' | 'PARTIALLY_COMPLIANT' | 'NON_COMPLIANT' | 'NONE',\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n\n    score_tag: 'FULLY_COMPLIANT' | 'PARTIALLY_COMPLIANT' | 'NON_COMPLIANT' | 'NONE',\\n\n    score_text: string,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/manuals\"\n_MODULE_ID = 'routes.manuals_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    doc_uuid: string,\\n\n    file_id: string,\\n",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_MODULE_ID = 'routes.manuals_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    doc_uuid: string,\\n\n    file_id: string,\\n\n    url_path: string,\\n",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    doc_uuid: string,\\n\n    file_id: string,\\n\n    url_path: string,\\n\n    }}",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {\\n\n    doc_uuid: string,\\n\n    file_id: string,\\n\n    url_path: string,\\n\n    }}\n    \"\"\"",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/regulations\"\n_MODULE_ID = 'routes.regulations_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_MODULE_ID = 'routes.regulations_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n\n    name: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n\n    name: string,\\n\n    effective_date: Date,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nimport lib.crypto as crypto_man\nfrom models.users import *\nfrom scripts.scripts_config import *",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "add_user_account",
        "kind": 2,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "def add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,\n        phone_number=phone_number,\n        email=f\"{username}@aerosync.com\"\n    )",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "client = pymongo.MongoClient(f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@{SERVER_ADDR}\")\ndb = client.get_database(os.environ['IVDMS_DB'])\nprint('Connected to MDB database')\ndef add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "db = client.get_database(os.environ['IVDMS_DB'])\nprint('Connected to MDB database')\ndef add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,\n        phone_number=phone_number,",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "upload_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef get_suggs(doc_id: str):",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "check_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef get_suggs(doc_id: str):\n    api_url = f\"{SUGGS_API}\"\n    http_res = requests.get(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "get_suggs",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def get_suggs(doc_id: str):\n    api_url = f\"{SUGGS_API}\"\n    http_res = requests.get(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef del_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.delete(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "del_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def del_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.delete(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        \"upload_id\": doc_id,\n        \"question\": question,\n        \"stream\": True,",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "ask_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def ask_doc(doc_id: str, question: str):\n    json_req = {\n        \"upload_id\": doc_id,\n        \"question\": question,\n        \"stream\": True,\n        \"search_entire_doc\": True,\n        \"detailed_citation\": True,\n        \"language\": \"en\",\n        \"model_type\": \"gpt-4\",\n    }",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "API_HEADERS",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "API_HEADERS = {'Authorization': f\"Bearer {os.environ['CHAT_DOC_API_KEY']}\"}\nUPLOAD_API = 'https://api.chatdoc.com/api/v2/documents/upload'\nDOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "UPLOAD_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "UPLOAD_API = 'https://api.chatdoc.com/api/v2/documents/upload'\nDOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "DOCS_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "DOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "SUGGS_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "SUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "ASK_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "ASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "DOC_ID",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "DOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "upload_doc",
        "kind": 2,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "def upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {\n                'role': 'user',",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "ask_doc",
        "kind": 2,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "def ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {\n                'role': 'user',\n                'content': question,\n            }\n        ]\n    }",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "API_HEADERS",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "API_HEADERS = {'x-api-key': os.environ['CHAT_PDF_API_KEY']}\nUPLOAD_API = 'https://api.chatpdf.com/v1/sources/add-file'\nASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "UPLOAD_API",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "UPLOAD_API = 'https://api.chatpdf.com/v1/sources/add-file'\nASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "ASK_API",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "ASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "DOC_ID",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "DOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "scripts.get_remote_logs",
        "description": "scripts.get_remote_logs",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']\nprint(f\"API_URL={API_URL}\")",
        "detail": "scripts.get_remote_logs",
        "documentation": {}
    },
    {
        "label": "status_msg",
        "kind": 5,
        "importPath": "scripts.get_remote_logs",
        "description": "scripts.get_remote_logs",
        "peekOfCode": "status_msg = json.loads(requests.get(f\"{API_URL}/test\").content.decode())\nprint(status_msg)\nif status_msg['success']:\n    print('fetching system logs...')\n    api_url = f\"{API_URL}/activity/get-logs\"\n    admin_access_token = login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    json_obj = json.loads(http_res.content.decode())\n    json_str = json.dumps(json_obj['data']['logs'], indent=2)",
        "detail": "scripts.get_remote_logs",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.regulations import *\n# autopep8: on\ndef convert_to_markdown(text):",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "convert_to_markdown",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def convert_to_markdown(text):\n    def replace_listing(match):\n        listing_type = match.group(1)\n        if listing_type.lower() in [\n            \"i\",\n            \"ii\",\n            \"iii\",\n            \"iv\",\n            \"v\",\n            \"vi\",",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def clean(text, allowed=list(string.printable)):\n    unicode_dashes = [\n        \"\\u2010\",  # hyphen\n        \"\\u2011\",  # non-breaking hyphen\n        \"\\u2012\",  # en dash\n        \"\\u2013\",  # en dash\n        \"\\u2014\",  # em dash\n        \"\\u2015\",  # horizontal bar\n        \"\\u2212\",  # minus sign\n        \"\\u301c\",  # wave dash",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract(path):\n    all_pages = []\n    reader = PdfReader(path)\n    pages = reader.pages\n    page_number = 0\n    char_count = 0\n    all_page_count = []\n    for i in pages:\n        parts = []\n        def visitor_body(text, cm, tm, fontDict, fontSize):",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "contains_span",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def contains_span(span, span_array):\n    for i in span_array:\n        if span[0] == i[0]:\n            return True\n    return False\ndef contains_span_intext(span, span_array):\n    for i in span_array:\n        if span[0] == i[0] + 2:\n            return True\n    return False",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "contains_span_intext",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def contains_span_intext(span, span_array):\n    for i in span_array:\n        if span[0] == i[0] + 2:\n            return True\n    return False\ndef check_type(text):\n    romans = \"ii|iii|iv|v|vi|vii|viii|ix|x|xi|xii|xiii|xiv|xv|xvi|xvii|xviii|xix|xx|xxi|xxii|xxiii|xxiv|xxv|xxvi|xxvii|xxviii|xxix|xxx\"\n    alphas = \"abcdefghijklmnopqrstuvwxyz\"\n    if text[0] == \"(\":\n        second_brak = text[:].find(\")\")",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "check_type",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def check_type(text):\n    romans = \"ii|iii|iv|v|vi|vii|viii|ix|x|xi|xii|xiii|xiv|xv|xvi|xvii|xviii|xix|xx|xxi|xxii|xxiii|xxiv|xxv|xxvi|xxvii|xxviii|xxix|xxx\"\n    alphas = \"abcdefghijklmnopqrstuvwxyz\"\n    if text[0] == \"(\":\n        second_brak = text[:].find(\")\")\n        if second_brak == -1:\n            return \"t\"\n        sub = text[1:second_brak]\n        if sub == \"i\":\n            return \"i\"",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "parse_paragraph",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def parse_paragraph(paragraph):\n    text = paragraph[:]\n    splitter = r\"\\.\\n|:\\n|;\\n| or\\n\"\n    items = re.split(splitter, text)\n    items = [i for i in items if i]\n    items_labled = []\n    last = None\n    i = None\n    for i in range(len(items) - 1):\n        item_type_here = check_type(items[i])",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract_section_header",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract_section_header(text, first_flt_span, filename):\n    section_name_reg = r\"Section (\\d+) - ([\\w\\s]+) \\(([\\w]+)\\)\\n\"\n    general_guidence_reg = r\"General Guidance\\n\"\n    applicability_reg = r\"Applicability\\n\"\n    section_header_text = text[0:first_flt_span].strip(\"\\n\").strip()\n    section_name = (\n        re.match(section_name_reg, section_header_text).group()[:-1].strip(\"\\n\").strip()\n    )\n    section_code = section_name[section_name.find(\"(\") + 1 : -1].strip(\"\\n\").strip()\n    gg = re.search(general_guidence_reg, section_header_text).span()[0]",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract_section_text",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract_section_text(text,section_code,all_page_count, page_start):\n    flts = rf\"({section_code}\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))*\"\n    in_text_flts_beg = rf\". ({section_code}\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))*\"\n    in_text_flts_end = rf\"({section_code}\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))* .\"\n    auditor_actions_reg = r\"\\nAuditor Actions\\n\"\n    Guidence_reg = r\"\\nGuidance\\n\"\n    gm_reg = r\"\\(GM\\)\"\n    sms_reg = r\"\\[SMS\\]\"\n    all_sections = []\n    in_text_spans_beg = []",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "generate_random_hash",
        "kind": 2,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "def generate_random_hash():\n    concatid = 'NE'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/nesma_oma/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[TOC_START_PAGE - 1].extract_text()\n        chapter_title = re.findall(r\"Chapter \\d+ [A-Za-z ]+\", part_toc_content)[",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "create_parts_metadata_file",
        "kind": 2,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "def create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/nesma_oma/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[TOC_START_PAGE - 1].extract_text()\n        chapter_title = re.findall(r\"Chapter \\d+ [A-Za-z ]+\", part_toc_content)[\n            0\n        ].strip()\n        metadata.append(",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "create_manual_toc_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "def create_manual_toc_tree():\n    def parse_toc_txt_to_tree(toc_text: str) -> list[tuple[str, str, int]]:\n        lines = toc_text.split(\"\\n\")\n        toc_epattern = f\" {'.'*32} \"\n        toc_info = []\n        for line in lines:\n            if toc_epattern in line:\n                section_code = line.split(\" \")[0]\n                if section_code == \"Chapter\":\n                    continue",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "rearrange_manual_content_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "def rearrange_manual_content_tree() -> list[object]:\n    def get_max(obj_list):\n        max_page = max(\n            obj_list,\n            key=lambda x: (\n                x.get(\"pages\")[0] if len(x.get(\"pages\")) == 1 else x.get(\"pages\")[1]\n            ),\n        )\n        max_page = (\n            max_page[\"pages\"][0]",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "create_manual_content_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "def create_manual_content_tree() -> list[tuple[str, int]]:\n    f = open(\"data/nesma_oma/nesma_oma_metadata.json\", \"r\")\n    json_str = f.read()\n    f.close()\n    json_obj = json.loads(json_str)\n    for mde in json_obj:\n        if not mde[\"include\"]:\n            continue\n        toc_info = []\n        pdf_reader = PdfReader(mde[\"filename\"])",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "TOC_START_PAGE",
        "kind": 5,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "TOC_START_PAGE = 3\nFaker.seed(0)\nfake = Faker(\"en_US\") \ndef generate_random_hash():\n    concatid = 'NE'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/nesma_oma/*.pdf\")\n    for part_path in manual_parts:",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "scripts.parse_manual_nesma",
        "description": "scripts.parse_manual_nesma",
        "peekOfCode": "fake = Faker(\"en_US\") \ndef generate_random_hash():\n    concatid = 'NE'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/nesma_oma/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[TOC_START_PAGE - 1].extract_text()",
        "detail": "scripts.parse_manual_nesma",
        "documentation": {}
    },
    {
        "label": "generate_random_hash",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "def generate_random_hash():\n    concatid = 'RXI_DG'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_DANGEROUS_GOODS/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()\n        chapter_title= \"\"",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "create_parts_metadata_file",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "def create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_DANGEROUS_GOODS/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()\n        chapter_title= \"\"\n        for match in re.finditer(r\"(\\d+) (\\w| )+\", part_toc_content):\n            chapter_title = match.group().strip()\n            break",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "create_manual_toc_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "def create_manual_toc_tree():\n    def parse_toc_txt_to_tree(toc_text: str) -> list[tuple[str, str, int]]:\n        lines = toc_text.split(\"\\n\")\n        toc_epattern = \"...\"\n        toc_info = []\n        for line in lines:\n            if toc_epattern in line:\n                if re.compile(r\"(\\s*)(\\d+)\\..\").match(line.split()[0]):\n                    page_number = int(line.split(\"-\")[-1].strip())\n                    section_name = re.findall(r\"\\s[A-Za-z ]+\\s+\", line)[0].strip()",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "rearrange_manual_content_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "def rearrange_manual_content_tree() -> list[object]:\n    def get_max(obj_list):\n        max_page = max(\n            obj_list,\n            key=lambda x: (\n                x.get(\"pages\")[0] if len(x.get(\"pages\")) == 1 else x.get(\"pages\")[1]\n            ),\n        )\n        max_page = (\n            max_page[\"pages\"][0]",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "fake = Faker(\"en_US\") \nTOC_START_PAGE = 2\ndef generate_random_hash():\n    concatid = 'RXI_DG'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_DANGEROUS_GOODS/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "TOC_START_PAGE",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "description": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "peekOfCode": "TOC_START_PAGE = 2\ndef generate_random_hash():\n    concatid = 'RXI_DG'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_DANGEROUS_GOODS/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()",
        "detail": "scripts.parse_manual_RXI_DANGEROUS_GOODS",
        "documentation": {}
    },
    {
        "label": "generate_random_hash",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "def generate_random_hash():\n    concatid = 'RXI_ER'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_EMERGENCY_RESPONSE/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()\n        chapter_title= \"\"",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "create_parts_metadata_file",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "def create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_EMERGENCY_RESPONSE/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()\n        chapter_title= \"\"\n        for match in re.finditer(r\"(\\d+) (\\w| )+\", part_toc_content):\n            chapter_title = match.group().strip()\n            break",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "create_manual_toc_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "def create_manual_toc_tree():\n    def parse_toc_txt_to_tree(toc_text: str,title:str) -> list[tuple[str, str, int]]:\n        lines = toc_text.split(\"\\n\")\n        toc_epattern = \"...\"\n        toc_info = []\n        for line in lines:\n            if toc_epattern in line:\n                if re.compile(r\"(\\s*)(\\d+)\\..\").match(line.split()[0]):\n                    page_number = int(line.split(\"-\")[-1].strip())\n                    section_name = re.findall(r\"\"\"\\s+[A-Za-z ,\"'-]+\\s+\"\"\", line)[0].strip()",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "rearrange_manual_content_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "def rearrange_manual_content_tree() -> list[object]:\n    def get_max(obj_list):\n        max_page = max(\n            obj_list,\n            key=lambda x: (\n                x.get(\"pages\")[0] if len(x.get(\"pages\")) == 1 else x.get(\"pages\")[1]\n            ),\n        )\n        max_page = (\n            max_page[\"pages\"][0]",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "fake = Faker(\"en_US\") \nTOC_START_PAGE = 2\ndef generate_random_hash():\n    concatid = 'RXI_ER'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_EMERGENCY_RESPONSE/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "TOC_START_PAGE",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "description": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "peekOfCode": "TOC_START_PAGE = 2\ndef generate_random_hash():\n    concatid = 'RXI_ER'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(\"data/RXI_EMERGENCY_RESPONSE/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()",
        "detail": "scripts.parse_manual_RXI_EMERGENCY_RESPONSE",
        "documentation": {}
    },
    {
        "label": "generate_random_hash",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "def generate_random_hash():\n    concatid = 'RXI_FDAP'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef clean(text):\n    new_text = text[:]\n    new_text = new_text.replace('\\u2013', '-')\n    new_text = new_text.replace('\"', \"'\")\n    return new_text\ndef create_parts_metadata_file():\n    metadata = []",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "def clean(text):\n    new_text = text[:]\n    new_text = new_text.replace('\\u2013', '-')\n    new_text = new_text.replace('\"', \"'\")\n    return new_text\ndef create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(r\"data/RXI_FLIGHT_DATA_ANALYSIS_PROGRAM/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "create_parts_metadata_file",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "def create_parts_metadata_file():\n    metadata = []\n    manual_parts = glob(r\"data/RXI_FLIGHT_DATA_ANALYSIS_PROGRAM/*.pdf\")\n    for part_path in manual_parts:\n        pdf_reader = PdfReader(part_path)\n        part_toc_content = pdf_reader.pages[0].extract_text()\n        chapter_title= \"\"\n        for match in re.finditer(r\"(\\d+)(\\s+)(\\w| )+\", part_toc_content):\n            print(match)\n            print(part_toc_content)",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "create_manual_toc_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "def create_manual_toc_tree():\n    def parse_toc_txt_to_tree(toc_text: str,title:str) -> list[tuple[str, str, int]]:\n        lines = toc_text.split(\"\\n\")\n        toc_epattern = \"...\"\n        toc_info = []\n        for line in lines:\n            if toc_epattern in line:\n                if re.compile(r\"(\\s*)(\\d+)\\..\").match(line.split()[0]):\n                    page_number = int(line.split(\"-\")[-1].strip())\n                    start = re.findall(r\"\"\"[A-Za-z]+\"\"\", line)",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "rearrange_manual_content_tree",
        "kind": 2,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "def rearrange_manual_content_tree() -> list[object]:\n    def get_max(obj_list):\n        max_page = max(\n            obj_list,\n            key=lambda x: (\n                x.get(\"pages\")[0] if len(x.get(\"pages\")) == 1 else x.get(\"pages\")[1]\n            ),\n        )\n        max_page = (\n            max_page[\"pages\"][0]",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "fake = Faker(\"en_US\") \nTOC_START_PAGE = [2,3,4,5]\ndef generate_random_hash():\n    concatid = 'RXI_FDAP'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef clean(text):\n    new_text = text[:]\n    new_text = new_text.replace('\\u2013', '-')\n    new_text = new_text.replace('\"', \"'\")\n    return new_text",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "TOC_START_PAGE",
        "kind": 5,
        "importPath": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "description": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "peekOfCode": "TOC_START_PAGE = [2,3,4,5]\ndef generate_random_hash():\n    concatid = 'RXI_FDAP'\n    return concatid + str(fake.unique.random_int(min=111111111111, max=999999999999))\ndef clean(text):\n    new_text = text[:]\n    new_text = new_text.replace('\\u2013', '-')\n    new_text = new_text.replace('\"', \"'\")\n    return new_text\ndef create_parts_metadata_file():",
        "detail": "scripts.parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "SERVER_ADDR",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "SERVER_ADDR = '127.0.0.1'\n# SERVER_ADDR = 'iv-dms.duckdns.org'\nSERVER_PORT = 8081\n# API_URL = f\"https://{SERVER_ADDR}/api\"\nAPI_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "SERVER_PORT = 8081\n# API_URL = f\"https://{SERVER_ADDR}/api\"\nAPI_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "API_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.users import *\nfrom models.regulations import *\nfrom models.manuals import *",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_routine",
        "kind": 2,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "def seed_routine():\n    print(\"seeding users...\")\n    db.get_collection(\"users\").insert_many([x.model_dump() for x in seed_users])\n    print(\"creating users indexes...\")\n    db.get_collection(\"users\").create_index(\"username\", unique=True)\n    db.get_collection(\"users\").create_index(\"email\", unique=True)\n    print(\"seeding regulations index...\")\n    db.get_collection(\"regulations\").insert_one(seed_regulations[0].model_dump())\n    mdb_result = db.get_collection(\"regulations\").insert_one(\n        seed_regulations[1].model_dump()",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "commands",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "commands = [\n    ['python',\"scripts/parse_iosa_section.py\"],\n    ['python',\"scripts/parse_manual_nesma.py\"],\n    ['python',\"scripts/parse_manual_RXI_DANGEROUS_GOODS.py\"],\n    ['python',\"scripts/parse_manual_RXI_EMERGENCY_RESPONSE.py\"],\n    ['python',\"scripts/parse_manual_RXI_FLIGHT_DATA_ANALYSIS_PROGRAM.py\"],\n]\nfor command in commands:\n    run(command, shell=True, check=True)\n# main",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "client = pymongo.MongoClient(\n    f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@127.0.0.1\"\n)\nclient.drop_database(os.environ[\"IVDMS_DB\"])\ndb = client.get_database(os.environ[\"IVDMS_DB\"])\n# users schema\nseed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "db = client.get_database(os.environ[\"IVDMS_DB\"])\n# users schema\nseed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",\n        pass_hash=\"86d74596bb4c2f6b63ae7c09c212a7ed824ab15371ec06a2126dffc3aaa191659478e432c458d5b6a7c0b21b5bf2120c91480c27e78cf94935135d8c022f42f7\",\n        user_role=UserRole.AUDITOR,\n        phone_number=\"+201001000000\",\n        email=\"cwael@aerosync.com\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_users",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",\n        pass_hash=\"86d74596bb4c2f6b63ae7c09c212a7ed824ab15371ec06a2126dffc3aaa191659478e432c458d5b6a7c0b21b5bf2120c91480c27e78cf94935135d8c022f42f7\",\n        user_role=UserRole.AUDITOR,\n        phone_number=\"+201001000000\",\n        email=\"cwael@aerosync.com\",\n        organization=\"AeroSync\",\n    ),",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_regulations",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_regulations = [\n    IOSARegulation(\n        type=RegulationType.IOSA,\n        name=\"IOSA Standards Manual (ISM) Ed 15\",\n        effective_date=datetime.strptime(\"1 Nov 2023\", \"%d %b %Y\"),\n        sections=[\n            IOSASection(\n                name=\"Section 2 Flight Operations\",\n                code=\"FLT\",\n                applicability=\"addresses safety and security requirements for flight operations, and is applicable to an operator that uses two-pilot, multi-engine aircraft with a maximum certificated takeoff mass in excess of 5,700 kg (12,566 lbs.).\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_unstructured_manuals",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_unstructured_manuals = [\n    UnstructuredManual(name=\"Example Manual 1\", pages=[]),\n    UnstructuredManual(\n        name=\"Example Manual 2\",\n        pages=[\n            \"page1 content\",\n            \"page2 content\",\n            \"page3 content\",\n        ],\n    ),",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_fs_index_files",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_fs_index_files = [\n    FSIndexFile(\n        username=\"cwael\",\n        datetime=datetime.now(),\n        file_type=IndexFileType.AIRLINES_MANUAL,\n        filename=\"nesma_org_cos_rad.pdf\",\n        doc_uuid=os.environ[\"INVALID_CHAT_DOC_UUID\"],\n        doc_status=ChatDOCStatus.PARSING_FAILD,\n        organization=\"AeroSync\",\n        parent=\"nesma_org_cos_rad.pdf\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_ai_tasks",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_ai_tasks = [\n    AITask(\n        username=\"cwael\",\n        start_datetime=datetime.now(),\n        end_datetime=datetime.now(),\n        task_type=AITaskType.COMPLIANCE_CHECK,\n        task_status=AITaskStatus.FINISHED,\n        json_res=JsonResponse(),\n    ),\n    AITask(",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_gpt35t_context",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_gpt35t_context = GPT35TContext(\n    username=\"cwael\",\n    datetime=datetime.now(),\n    conversation=[\n        GPT35TMessage(\n            role=GPT35ContextRole.SYSTEM,\n            content=\"You are an aviation professionals\",\n        ),\n        GPT35TMessage(\n            role=GPT35ContextRole.USER,",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_log",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_log = Log(\n    datetime=datetime.now(),\n    level=\"DEBUG\",\n    source=\"seed_schema\",\n    description=\"seeding database\",\n)\nseed_flow_reports = [\n    FlowReport(\n        title=\"Test flow report\",\n        regulation_id=\"\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_flow_reports",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_flow_reports = [\n    FlowReport(\n        title=\"Test flow report\",\n        regulation_id=\"\",\n        code=\"FLT 1\",\n        sub_sections=[\n            ReportSubSectionWritten(\n                title=\"Section 1\",\n                checklist_items=[\n                    ReportItem(",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "print_err_log",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True\n    except:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "is_port_open",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True\n    except:\n        return False\n    finally:\n        _socket.close()",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def run_test(iter_count: int, thread_id: int = 0) -> int:\n    for i in range(iter_count):\n        print(f\"[THREAD-{thread_id}] Starting iteration {i}\")\n        test_exit_code = os.system('pytest')\n        if test_exit_code != 0:\n            print_err_log(f\"[THREAD-{thread_id}] Test iteration {i} faild\")\n            return 1\n    return 0\n# check current directory\ndir_content = glob.glob('*')",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "TEST_COUNT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "TEST_COUNT = 10\nTHREAD_COUNT = 10\nSERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "THREAD_COUNT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "THREAD_COUNT = 10\nSERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_IP",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_URL",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "API_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "dir_content",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "dir_content = glob.glob('*')\nif 'test' not in dir_content:\n    print_err_log('No tests found in this directory')\n    sys.exit(1)\n# check if server port is open\nif not is_port_open(SERVER_IP, SERVER_PORT):\n    print_err_log(f\"Server {SERVER_URL} is offline\")\n    sys.exit(1)\n# check http server\napi_url = f\"{API_URL}/test\"",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "api_url",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "api_url = f\"{API_URL}/test\"\nhttp_res = requests.get(api_url)\nif http_res.status_code != 200:\n    print_err_log(f\"Local server error [status_code = {http_res.status_code}]\")\n    sys.exit(1)\njson_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "http_res",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "http_res = requests.get(api_url)\nif http_res.status_code != 200:\n    print_err_log(f\"Local server error [status_code = {http_res.status_code}]\")\n    sys.exit(1)\njson_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]\nif test_mode == '-p':",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "json_res_body",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "json_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]\nif test_mode == '-p':\n    # run parallel stress test\n    test_per_thread = TEST_COUNT // THREAD_COUNT\n    thread_list: list[threading.Thread] = [threading.Thread(target=run_test, args=(test_per_thread, i)) for i in range(THREAD_COUNT)]\n    for thread in thread_list:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "test_mode",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "test_mode = sys.argv[1]\nif test_mode == '-p':\n    # run parallel stress test\n    test_per_thread = TEST_COUNT // THREAD_COUNT\n    thread_list: list[threading.Thread] = [threading.Thread(target=run_test, args=(test_per_thread, i)) for i in range(THREAD_COUNT)]\n    for thread in thread_list:\n        thread.start()\n    for thread in thread_list:\n        thread.join()\nelif test_mode == '-s':",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.user_flows",
        "description": "scripts.user_flows",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom scripts.scripts_config import *\n# autopep8: on\n# change this",
        "detail": "scripts.user_flows",
        "documentation": {}
    },
    {
        "label": "scan_doc_user_flow",
        "kind": 2,
        "importPath": "scripts.user_flows",
        "description": "scripts.user_flows",
        "peekOfCode": "def scan_doc_user_flow():\n    access_token = login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{API_URL}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    json_res_body = json.loads(http_res.content.decode())\n    regulation_id = [x for x in json_res_body['data']['regulations_options'] if x['name'] == 'IOSA Standards Manual (ISM) Ed 16-Revision2'][0]['id']\n    # test pdf AI scanner\n    print('scanning PDF...')",
        "detail": "scripts.user_flows",
        "documentation": {}
    },
    {
        "label": "comply_enhance_user_flow",
        "kind": 2,
        "importPath": "scripts.user_flows",
        "description": "scripts.user_flows",
        "peekOfCode": "def comply_enhance_user_flow():\n    access_token = login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    verbose = True\n    # get regulations options\n    api_url = f\"{API_URL}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    json_res_body = json.loads(http_res.content.decode())\n    regulation_id = [x for x in json_res_body['data']['regulations_options'] if x['name'] == 'IOSA Standards Manual (ISM) Ed 16-Revision2'][0]['id']\n    # call audit llm api",
        "detail": "scripts.user_flows",
        "documentation": {}
    },
    {
        "label": "TEXT_TO_AUDIT",
        "kind": 5,
        "importPath": "scripts.user_flows",
        "description": "scripts.user_flows",
        "peekOfCode": "TEXT_TO_AUDIT = \"\"\"\nNo person may serve as a crewmember knowing that he has a physical deficiency or mental\ncondition that would render him unable to meet the requirements of his current medical\ncertificate, to discharge his responsibilities to a safe standard or could endanger the safety of\nthe aircraft or its occupants.\nCrewmembers should not undertake flying duties whilst under the influence of alcohol,\nnarcotics, drugs or any medicine that was not approved by the medical department for use for\ncrewmembers like sleeping tablet.\nThe following factors shall be considered while undertaking flying duties by crewmembers:\n- alcohol and psychoactive substance use;",
        "detail": "scripts.user_flows",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.gpt_35t import *\nfrom models.regulations import *\n# autopep8: on",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "agg_score",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def agg_score(items: list[GTP35TIOSAItemResponse]):\n    \"\"\" computes GPT35T aggregate score TODO-GALAL \"\"\"\n    return round(sum([item.score for item in items]) / len(items))\ndef parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(GTP35TIOSAItemResponse(text=parent_text, score=agg_score(items), children=child_items))",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "parse_scores_tree",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(GTP35TIOSAItemResponse(text=parent_text, score=agg_score(items), children=child_items))\n        elif isinstance(value, int):\n            items.append(GTP35TIOSAItemResponse(text=key, score=value))\n    return items",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "gpt35t_output_format",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def gpt35t_output_format(llm_json_res: dict) -> GPT35TAuditResponse:\n    scores_tree = llm_json_res['compliance_scores']\n    comments = llm_json_res['comments']\n    details = parse_scores_tree(scores_tree)\n    return GPT35TAuditResponse(\n        score=agg_score(details),\n        comments=comments,\n        details=details\n    )\ndef create_output_json_template(iosa_item: IOSAItem):",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "create_output_json_template",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def create_output_json_template(iosa_item: IOSAItem):\n    pass\ndef parse_toc():\n    def extract_chapter_details(line: str) -> tuple[str, int]:\n        chapter_title: str = re.findall(r'(Chapter \\d+ [A-Za-z ]+)\\s+\\.', line)[0]\n        chapter_title = chapter_title.strip()\n        chapter_start_page = re.findall(r'\\.\\s+(\\d+)', line)[0]\n        chapter_start_page = int(chapter_start_page)\n        return chapter_title, chapter_start_page\n    # load toc content",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "parse_toc",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def parse_toc():\n    def extract_chapter_details(line: str) -> tuple[str, int]:\n        chapter_title: str = re.findall(r'(Chapter \\d+ [A-Za-z ]+)\\s+\\.', line)[0]\n        chapter_title = chapter_title.strip()\n        chapter_start_page = re.findall(r'\\.\\s+(\\d+)', line)[0]\n        chapter_start_page = int(chapter_start_page)\n        return chapter_title, chapter_start_page\n    # load toc content\n    with open('data/nesma_OMA_toc.txt', 'r') as f:\n        toc_content = f.read()",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "gpt35t_json_res",
        "kind": 5,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "gpt35t_json_res = {\n    \"compliance_scores\": {\n        \"Operator shall have an initial training program for instructors, evaluators and line check airmen\": {\n            \"i) An instructor course\": {\n                \"a) The fundamentals of teaching and evaluation\": 2,\n                \"b) Lesson plan management\": 2,\n                \"c) Briefing and debriefing\": 2,\n                \"d) Human performance issues\": 2,\n                \"e) Company policies and procedures\": 2,\n                \"f) Simulator serviceability and training in simulator operation\": 2,",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "flt_2_1_35",
        "kind": 5,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "flt_2_1_35 = IOSAItem(\n    code='FLT 2.1.35',\n    guidance='',\n    iosa_map=[],\n    paragraph='',\n    constraints=[\n        Constrain(\n            text='The Operator shall have an initial training program for instructors, evaluators and line check airmen,to include:',\n            children=[\n                Constrain(",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "flt_3_1_1",
        "kind": 5,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "flt_3_1_1 = IOSAItem(\n    code=\"FLT 3.1.1\",\n    guidance=\"Refer to the IRM for the definitions of Operations and Operator.\",\n    iosa_map=[\"3 Line Operations\", \"3.1 Common Language\"],\n    paragraph='',\n    constraints=[\n        Constrain(\n            text=\"The Operator shall ensure the designation of a common language(s) for use by all flight crew members for communication:\",\n            children=[\n                Constrain(text=\"On the flight deck during line operations\"),",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "test_get_logs_lock",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_get_logs_lock():\n    api_url = f\"{_test_config.get_api_url()}/activity/get-logs\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\n    user_access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {user_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_get_logs",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_get_logs():\n    api_url = f\"{_test_config.get_api_url()}/activity/get-logs\"\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'logs' in json_res_body['data']\n    logs = json_res_body['data']['logs']",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_check_ai_task_status_api_lock",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_check_ai_task_status_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/check-task\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'task_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_check_ai_task_status_api_invalid_task_info():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_check_ai_task_status_api_invalid_task_info",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_check_ai_task_status_api_invalid_task_info():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/check-task\"\n    http_res = requests.post(api_url, headers=http_headers, json={'task_id': '000000000000000000000000'})\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'AI Task not Found')\ndef test_get_all_ai_tasks_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_all_ai_tasks_api_lock",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_all_ai_tasks_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_all_ai_tasks_api_success():\n    username = 'cwael'\n    access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_all_ai_tasks_api_success",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_all_ai_tasks_api_success():\n    username = 'cwael'\n    access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'ai_tasks' in json_res_body['data']\n    if len(json_res_body['data']['ai_tasks']) > 0:",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_ai_task_status_api_success",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_ai_task_status_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get ai tasks options\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'ai_tasks' in json_res_body['data']\n    assert len(json_res_body['data']['ai_tasks']) > 0",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_create_attachment_api_lock",
        "kind": 2,
        "importPath": "test.test_attachments_api",
        "description": "test.test_attachments_api",
        "peekOfCode": "def test_create_attachment_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/attachments/create-attachment\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_attachment.png', 'rb')})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_create_attachment_png_file_api_success():\n    # test create attachment\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_attachments_api",
        "documentation": {}
    },
    {
        "label": "test_create_attachment_png_file_api_success",
        "kind": 2,
        "importPath": "test.test_attachments_api",
        "description": "test.test_attachments_api",
        "peekOfCode": "def test_create_attachment_png_file_api_success():\n    # test create attachment\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/attachments/create-attachment\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_attachment.png', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'file_id' in json_res_body['data']",
        "detail": "test.test_attachments_api",
        "documentation": {}
    },
    {
        "label": "test_create_attachment_zip_file_api_success",
        "kind": 2,
        "importPath": "test.test_attachments_api",
        "description": "test.test_attachments_api",
        "peekOfCode": "def test_create_attachment_zip_file_api_success():\n    # test create attachment\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/attachments/create-attachment\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_attachment.zip', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'file_id' in json_res_body['data']",
        "detail": "test.test_attachments_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_failed_invalid_account",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_failed_invalid_account():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'fake_user',\n        'password': 'fake_password',\n    })\n    assert http_res.status_code == 401\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Login Failed, Invalid User Credentials')\ndef test_auth_api_login_failed_invalid_password():",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_failed_invalid_password",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_failed_invalid_password():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'air_cairo',\n        'password': 'fake_password',\n    })\n    assert http_res.status_code == 401\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Login Failed, Invalid User Credentials')\ndef test_auth_api_login_success():",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_success",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_success():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'cwael',\n        'password': 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV',\n    })\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'access_token' in json_res_body['data']",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.flow_reports import (\n    AuditorActions,\n    FinalComment,",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_list_flow_report_lock",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_list_flow_report_lock():\n    api_url = f\"{_test_config.get_api_url()}/flow_report/list-flow-report\"\n    http_headers = {\"X-Auth\": \"Bearer fake_token\"}\n    payload = {\"creator\": \"cwael\"}\n    http_res = requests.post(api_url, headers=http_headers, json=payload)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    print(json_res_body)\n    assert (\n        not json_res_body[\"success\"]",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_create_flow_report",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_create_flow_report():\n    admin_access_token = _test_config.login_user(\n        \"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_list_flow_report",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_list_flow_report():\n    admin_access_token = _test_config.login_user(\n        \"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_get_flow_report",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_get_flow_report():\n    admin_access_token = _test_config.login_user(\n        \"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    # create flow report\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_delete_flow_report",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_delete_flow_report():\n    admin_access_token = _test_config.login_user(\n        \"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_update_flow_report_sub_sections",
        "kind": 2,
        "importPath": "test.test_flow_reports_api",
        "description": "test.test_flow_reports_api",
        "peekOfCode": "def test_update_flow_report_sub_sections():\n    admin_access_token = _test_config.login_user(\n        \"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)",
        "detail": "test.test_flow_reports_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_lock",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/llm/iosa-audit\"\n    http_headers = {\"X-Auth\": \"Bearer fake_token\"}\n    http_res = requests.post(\n        api_url,\n        headers=http_headers,\n        json={\n            \"regulation_id\": \"000000000000000000000000\",\n            \"checklist_code\": \"XXX 0.0.0\",\n            \"text\": \"some text\",",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success():\n    access_token = _test_config.login_user(\"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\")\n    http_headers = {\"X-Auth\": f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body[\"success\"]\n    assert \"regulations_options\" in json_res_body[\"data\"]",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success_low_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success_low_score():\n    access_token = _test_config.login_user(\"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\")\n    http_headers = {\"X-Auth\": f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body[\"success\"]\n    assert \"regulations_options\" in json_res_body[\"data\"]",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success_high_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success_high_score():\n    access_token = _test_config.login_user(\"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\")\n    http_headers = {\"X-Auth\": f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body[\"success\"]\n    assert \"regulations_options\" in json_res_body[\"data\"]",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_unstruct_api_success_high_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_unstruct_api_success_high_score():\n    access_token = _test_config.login_user(\"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\")\n    http_headers = {\"X-Auth\": f\"Bearer {access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_pages_api_success_high_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_pages_api_success_high_score():\n    if not int(os.environ[\"GPT_35T_ENABLE\"]):\n        return\n    admin_access_token = _test_config.login_user(\n        \"eslam\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_pages_api_combined_low_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_pages_api_combined_low_score():\n    if not int(os.environ[\"GPT_35T_ENABLE\"]):\n        return\n    admin_access_token = _test_config.login_user(\n        \"eslam\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    http_headers = {\"X-Auth\": f\"Bearer {admin_access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_unstruct_generate",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_unstruct_generate():\n    access_token = _test_config.login_user(\"cwael\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\")\n    http_headers = {\"X-Auth\": f\"Bearer {access_token}\"}\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "LLM_SCORE_TH",
        "kind": 5,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "LLM_SCORE_TH = 0.4\ndef test_llm_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/llm/iosa-audit\"\n    http_headers = {\"X-Auth\": \"Bearer fake_token\"}\n    http_res = requests.post(\n        api_url,\n        headers=http_headers,\n        json={\n            \"regulation_id\": \"000000000000000000000000\",\n            \"checklist_code\": \"XXX 0.0.0\",",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_parse_pdf_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_parse_pdf_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_manual.pdf', 'rb')})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_page_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'manual_id': '000000000000000000000000',\n        'page_order': 0,\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_manual_not_found",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_manual_not_found():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'manual_id': '000000000000000000000000',\n        'page_order': 0,\n    })\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get manuals options\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'manuals_options' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_meta_data_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_meta_data_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-meta-data\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'manual_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_meta_data_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_meta_data_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_meta_data_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get manuals options\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'manuals_options' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_chat_doc_parse_api",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_chat_doc_parse_api():\n    # test parse doc\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/nesma_org_cos_rad.pdf', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'doc_uuid' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_chat_doc_parse_api_bad_file_type",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_chat_doc_parse_api_bad_file_type():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_manual.txt', 'rb')})\n    assert http_res.status_code == 409\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Bad File Extention')\ndef test_get_user_manuals_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_manuals_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_user_manuals_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_user_manuals_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_manuals_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_user_manuals_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'files' in json_res_body['data']\n    if len(json_res_body['data']['files']) > 0:\n        example_file = json_res_body['data']['files'][0]",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_list_fs_index",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_list_fs_index():\n    admin_access_token = _test_config.login_user(\n        \"eslam\", \"CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV\"\n    )\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # create fs index\n    api_url = f\"{_test_config.get_api_url()}/manuals/create-manual\"\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/non_seeded_sample_file.pdf', 'rb')})",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_delete_manual_fs_index",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_delete_manual_fs_index():\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # create fs index\n    api_url = f\"{_test_config.get_api_url()}/manuals/create-manual\"\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/non_seeded_sample_file.pdf', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_rename_manual_fs_index",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_rename_manual_fs_index():\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # create fs index\n    api_url = f\"{_test_config.get_api_url()}/manuals/create-manual\"\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/non_seeded_sample_file.pdf', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_create_manual_fs_index",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_create_manual_fs_index():\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    get_database = _test_config.get_database()\n    assert get_database != None\n    # create fs index\n    api_url = f\"{_test_config.get_api_url()}/manuals/create-manual\"\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/non_seeded_sample_file.pdf', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_tree_v2_structure",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_tree_v2_structure():\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    get_database = _test_config.get_database()\n    assert get_database != None\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    file = get_database['fs_index'].find_one({\"filename\": \"nesma_oma_ch13.pdf\"})\n    assert file['doc_uuid']\n    # get tree api\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-tree-v2\"\n    payload = {",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_all_tree_structure",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_all_tree_structure():\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    get_database = _test_config.get_database()\n    assert get_database != None\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    # get tree api\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-all-trees\"\n    payload = {\n    }\n    http_res = requests.post(api_url, headers=http_headers, json=payload)",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_options_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_options_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_options_api_success():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_options_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_options_api_success():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']\n    if len(json_res_body['data']['regulations_options']) > 0:",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'regulation_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_codes_api_regulation_not_found():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_regulation_not_found",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_regulation_not_found():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'regulation_id': '000000000000000000000000'})\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Regulation Codes not Found')\ndef test_get_codes_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_code_iosa_map_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_code_iosa_map_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-iosa-map\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_code_iosa_map_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_code_iosa_map_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_iosa_checklist_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_iosa_checklist_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-iosa-checklist\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_iosa_checklist_api_sucess",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_iosa_checklist_api_sucess():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_2",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_2():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-checklist-template-options\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_checklist_template_options_empty_source_map():",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_empty_source_map",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_empty_source_map():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_valid_source_map",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_valid_source_map():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_server_online",
        "kind": 2,
        "importPath": "test.test_server_online",
        "description": "test.test_server_online",
        "peekOfCode": "def test_server_online():\n    api_url = f\"{_test_config.get_api_url()}/test\"\n    http_res = requests.get(api_url)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert (json_res_body['success'] and json_res_body['msg'] == 'server online')",
        "detail": "test.test_server_online",
        "documentation": {}
    },
    {
        "label": "get_api_url",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(\n        api_url,\n        json={\n            \"username\": username,",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "get_file_server_url",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(\n        api_url,\n        json={\n            \"username\": username,\n            \"password\": password,\n        },",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(\n        api_url,\n        json={\n            \"username\": username,\n            \"password\": password,\n        },\n    )\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_database():\n    connection_string = (\n        f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@127.0.0.1\"\n    )\n    mdb_client = MongoClient(connection_string)\n    if mdb_client:\n        return mdb_client[os.environ[\"IVDMS_DB\"]]\n    return None\nimport random\n# FLT 3.1.1",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "_SERVER_ADDR",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "_SERVER_ADDR = \"127.0.0.1\"\n_SERVER_PORT = 8081\ndef get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(\n        api_url,",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "_SERVER_PORT",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "_SERVER_PORT = 8081\ndef get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(\n        api_url,\n        json={",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "text = \"The Operator shall ensure the designation of a common language(s) for use by all flight crew members for communication: (i) On the flight deck during line operations; (ii) If the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation activities.\"\nrandom_sentences = [\n    \"The importance of effective communication in aviation cannot be overstated.\",\n    \"Pilots undergo rigorous training to handle various scenarios during flights.\",\n    \"Weather conditions play a crucial role in flight planning and execution.\",\n    \"Modern aircraft are equipped with advanced avionics systems for navigation and communication.\",\n    \"Air traffic control guides pilots through crowded airspace to ensure safe flights.\",\n    \"Maintaining situational awareness is paramount for flight crew members.\",\n    \"Crew resource management techniques enhance teamwork and decision-making in aviation.\",\n    \"Emergency procedures are practiced regularly to ensure quick and effective responses.\",",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "random_sentences",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "random_sentences = [\n    \"The importance of effective communication in aviation cannot be overstated.\",\n    \"Pilots undergo rigorous training to handle various scenarios during flights.\",\n    \"Weather conditions play a crucial role in flight planning and execution.\",\n    \"Modern aircraft are equipped with advanced avionics systems for navigation and communication.\",\n    \"Air traffic control guides pilots through crowded airspace to ensure safe flights.\",\n    \"Maintaining situational awareness is paramount for flight crew members.\",\n    \"Crew resource management techniques enhance teamwork and decision-making in aviation.\",\n    \"Emergency procedures are practiced regularly to ensure quick and effective responses.\",\n    \"Pilots rely on a combination of instruments and visual cues for navigation.\",",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "partial_compliant_text",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "partial_compliant_text = []\nfor i in range(20):\n    for sentence in text.split(';'):\n        sentence = sentence.strip()\n        if sentence:\n            paragraph = [sentence] + random.sample(random_sentences, 3)\n            partial_compliant_text.append(' '.join(paragraph))\n# test data\nfull_compliant_text = [\"The Operator must guarantee the choice of a shared language(s) for communication among all flight crew members: (i) While on the flight deck during line operations; (ii) If the Operator operates passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) Throughout flight crew training and assessment exercises.\",\n    \"The Operator is required to ensure the adoption of a common language(s) for communication among all flight crew members: (i) On the flight deck during line operations; (ii) When the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) Throughout flight crew training and assessment activities.\",",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "full_compliant_text",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "full_compliant_text = [\"The Operator must guarantee the choice of a shared language(s) for communication among all flight crew members: (i) While on the flight deck during line operations; (ii) If the Operator operates passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) Throughout flight crew training and assessment exercises.\",\n    \"The Operator is required to ensure the adoption of a common language(s) for communication among all flight crew members: (i) On the flight deck during line operations; (ii) When the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) Throughout flight crew training and assessment activities.\",\n    \"The Operator needs to ensure the selection of a common language(s) for communication among all flight crew members: (i) On the flight deck during line operations; (ii) If the Operator operates passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation sessions.\",\n    \"The Operator should ensure the designation of a shared language(s) for use by all flight crew members for communication: (i) On the flight deck during line operations; (ii) If the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and assessment activities.\",\n    \"The Operator must ensure the establishment of a common language(s) for use by all flight crew members for communication: (i) On the flight deck during line operations; (ii) If the Operator carries out passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation procedures.\",\n    \"The Operator is responsible for ensuring the selection of a common language(s) for communication among all flight crew members: (i) While on the flight deck during line operations; (ii) If the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation activities.\",\n    \"The Operator must ensure the appointment of a common language(s) for communication among all flight crew members: (i) On the flight deck during line operations; (ii) If the Operator operates passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) Throughout flight crew training and assessment sessions.\",\n    \"The Operator should ensure the designation of a shared language(s) for use by all flight crew members for communication: (i) On the flight deck during line operations; (ii) If the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation exercises.\",\n    \"The Operator is required to ensure the selection of a common language(s) for communication among all flight crew members: (i) While on the flight deck during line operations; (ii) If the Operator conducts passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and assessment sessions.\",\n    \"The Operator needs to ensure the establishment of a common language(s) for communication among all flight crew members: (i) On the flight deck during line operations; (ii) If the Operator operates passenger flights with cabin crew, between the flight crew and cabin crew during line operations; (iii) During flight crew training and evaluation activities.\",",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "non_compliant_text",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "non_compliant_text = [\n    \"In a faraway kingdom, there lived a beautiful princess named Aurora. She was cursed by an evil sorceress and fell into a deep sleep. Only true love's kiss could awaken her from her slumber. Many brave knights attempted to rescue her, but it was a humble peasant boy who ultimately broke the curse and saved the kingdom.\",\n    \"Once upon a time, there was a young boy named Jack who lived in a small village. Jack was known for his mischievous nature and his love for adventure. One day, he stumbled upon a mysterious map that led to a hidden treasure. Determined to find it, Jack embarked on a thrilling journey filled with danger and excitement.\",\n    \"In a faraway kingdom, there lived a beautiful princess named Aurora. She was cursed by an evil sorceress and fell into a deep sleep. Only true love's kiss could awaken her from her slumber. Many brave knights attempted to rescue her, but it was a humble peasant boy who ultimately broke the curse and saved the kingdom.\",\n    \"A group of friends decided to go on a camping trip deep into the forest. Little did they know, they would encounter a legendary creature that was said to haunt the woods. As they huddled around the campfire, sharing ghost stories, they heard rustling in the bushes. Suddenly, a giant creature emerged, but instead of attacking them, it began to dance and entertain them with its antics.\",\n    \"There was once a village that was plagued by a terrible drought. The crops withered, and the people were starving. In desperation, they turned to their wise elder for help. Through his guidance, they discovered a hidden underground spring that provided them with an endless supply of water. The village flourished once again, and they never forgot the lesson of perseverance and resourcefulness.\",\n    \"A young girl named Lily had always dreamed of becoming a famous painter. Despite her humble beginnings, she never gave up on her passion for art. With determination and hard work, she honed her skills and eventually gained recognition for her breathtaking paintings. Her story inspired many others to pursue their dreams, no matter how impossible they may seem.\",\n    \"In a bustling city, there was a street performer named Max who entertained passersby with his juggling skills. One day, a talent scout noticed his performance and offered him a chance to audition for a popular circus. Nervous but excited, Max wowed the judges with his act and secured a spot in the circus troupe. He traveled the world, bringing joy to audiences everywhere.\",\n    \"Deep in the ocean, there lived a curious mermaid named Marina. She longed to explore the world above the waves but was forbidden by her father, the king of the sea. Despite his warnings, Marina ventured to the surface and befriended a human prince. Together, they discovered the beauty of both land and sea, proving that friendship knows no boundaries.\",\n    \"In a magical forest, there was a tree that was said to grant wishes to those who could reach its highest branches. Many travelers attempted to climb the tree, but none succeeded. One day, a kind-hearted orphan girl stumbled upon the tree and made a selfless wish for the happiness of all living creatures. To her surprise, the tree began to glow, and her wish was granted.\",",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "example_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "example_prompt = \"\"\"The Flight Instructors, Check Airman and Examiners are considered to be the foundation and\nthe pillars on which the entire safe and efficient flight operations stand.\nCareful selection system for Instructor Pilot, Check Airman and Examiners is developed to\nensure a high standard product of the training and checking process. The Instructor Pilot must\nbe basically a Role Model.\nThe initial selection therefore shall be based on many factors, included but not limited to:\n1) Desire to do the job.\n2) Self-discipline.\n3) Experience and proficiency.\n4) High standard of aviation knowledge.",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "dummy_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "dummy_prompt = \"\"\"The module used to set the rules by which the system will restrict crew assignment. Rule set\nmanagement is used to enter crew assignment regulations and standards. Rule setting\ncompliance with regulations is the responsibility of the chief pilot and shall be restricted to his\naccess. Crew scheduling department shall have no access to change the rules.\"\"\"\nvalid_prompt = \"\"\"English and Arabic are the designated common language used by all Nesma Airlines flight\ncrewmembers for communication.\nPersonnel who demonstrate proficiency below expert level (ICAO Level 6) should be formally\nevaluated at intervals in accordance with ECAR 63.9 and ICAO Annex 1 item 1.2.9.6 as\nfollows:\n- Those demonstrated language proficiency at the operational level (Level 4) should be",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "valid_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "valid_prompt = \"\"\"English and Arabic are the designated common language used by all Nesma Airlines flight\ncrewmembers for communication.\nPersonnel who demonstrate proficiency below expert level (ICAO Level 6) should be formally\nevaluated at intervals in accordance with ECAR 63.9 and ICAO Annex 1 item 1.2.9.6 as\nfollows:\n- Those demonstrated language proficiency at the operational level (Level 4) should be\nevaluated at least once every three years\n- Those demonstrated language proficiency at the operational level (Level 5) should be\nevaluated at least once every six years\nECAA requires level four of English language as a minimum level. All operational",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "server = FastAPI(\n    title=os.environ['SERVER_NAME'],\n    description='Fix seeder',\n    version=\"0.38.3\",\n    lifespan=lifespan,\n)\nserver.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_methods=['*'],",
        "detail": "main",
        "documentation": {}
    }
]