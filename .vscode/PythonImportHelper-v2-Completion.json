[
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "importPath": "models.runtime",
        "description": "models.runtime",
        "isExtraImport": true,
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "database.mongo_driver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "isExtraImport": true,
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.logs",
        "description": "models.logs",
        "isExtraImport": true,
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "ApiUsageKey",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "ApiUsageKey",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskStatus",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskType",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "isExtraImport": true,
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "models.httpio",
        "description": "models.httpio",
        "isExtraImport": true,
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "aiofiles.os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles.os",
        "description": "aiofiles.os",
        "detail": "aiofiles.os",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FILE_TYPE_PATH_MAP",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "isExtraImport": true,
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "UnstructuredManual",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManualMetaData",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.manuals",
        "description": "models.manuals",
        "isExtraImport": true,
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "lib.log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.log",
        "description": "lib.log",
        "detail": "lib.log",
        "documentation": {}
    },
    {
        "label": "motor.motor_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "ServerApi",
        "importPath": "pymongo.server_api",
        "description": "pymongo.server_api",
        "isExtraImport": true,
        "detail": "pymongo.server_api",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "RegulationsMetaData",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSASection",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.regulations",
        "description": "models.regulations",
        "isExtraImport": true,
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "ReportTemplate",
        "importPath": "models.audit_reports",
        "description": "models.audit_reports",
        "isExtraImport": true,
        "detail": "models.audit_reports",
        "documentation": {}
    },
    {
        "label": "ReportSubSection",
        "importPath": "models.audit_reports",
        "description": "models.audit_reports",
        "isExtraImport": true,
        "detail": "models.audit_reports",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "importPath": "models.audit_reports",
        "description": "models.audit_reports",
        "isExtraImport": true,
        "detail": "models.audit_reports",
        "documentation": {}
    },
    {
        "label": "lib.crypto",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "database.ai_tasks_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.ai_tasks_database_api",
        "description": "database.ai_tasks_database_api",
        "detail": "database.ai_tasks_database_api",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "computed_field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "isExtraImport": true,
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "lib.security",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.security",
        "description": "lib.security",
        "detail": "lib.security",
        "documentation": {}
    },
    {
        "label": "database.activity_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.activity_database_api",
        "description": "database.activity_database_api",
        "detail": "database.activity_database_api",
        "documentation": {}
    },
    {
        "label": "database.users_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.users_database_api",
        "description": "database.users_database_api",
        "detail": "database.users_database_api",
        "documentation": {}
    },
    {
        "label": "database.regulations_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.regulations_database_api",
        "description": "database.regulations_database_api",
        "detail": "database.regulations_database_api",
        "documentation": {}
    },
    {
        "label": "lib.gemini",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "lib.gpt_35t",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "database.manuals_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.manuals_database_api",
        "description": "database.manuals_database_api",
        "detail": "database.manuals_database_api",
        "documentation": {}
    },
    {
        "label": "database.fs_index_database_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.fs_index_database_api",
        "description": "database.fs_index_database_api",
        "detail": "database.fs_index_database_api",
        "documentation": {}
    },
    {
        "label": "lib.chat_doc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.chat_doc",
        "description": "lib.chat_doc",
        "detail": "lib.chat_doc",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "isExtraImport": true,
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "isExtraImport": true,
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "code",
        "description": "code",
        "detail": "code",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "readline",
        "description": "readline",
        "detail": "readline",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "Completer",
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "isExtraImport": true,
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "_test_config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_test_config",
        "description": "_test_config",
        "detail": "_test_config",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "auth_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "manuals_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "activity_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "regulations_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "llm_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "ai_tasks_api",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "_PUBLIC_DIR",
        "kind": 5,
        "importPath": "database.fs_index_database_api",
        "description": "database.fs_index_database_api",
        "peekOfCode": "_PUBLIC_DIR = 'public'\nasync def create_fs_index_entry(username: str, file_type: IndexFileType, filename: str, chat_doc_uuid: str, data: bytes) -> ServiceResponse:\n    # check file extention\n    file_ext = os.path.splitext(filename)[1]\n    if file_ext != '.pdf':\n        return ServiceResponse(success=False, msg='Bad File Extention', status_code=409)\n    # check if index entry already exists\n    fs_index = await get_database().get_collection('fs_index').find_one({\n        '$and': [\n            {'username': username},",
        "detail": "database.fs_index_database_api",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "peekOfCode": "def get_database() -> maio.core.AgnosticDatabase | None:\n    if mdb_client:\n        return mdb_client.get_database(os.environ['IVDMS_DB'])\n    return None\ndef validate_bson_id(bson_id: str) -> ObjectId | None:\n    try:\n        return ObjectId(bson_id)\n    except:\n        return None",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "validate_bson_id",
        "kind": 2,
        "importPath": "database.mongo_driver",
        "description": "database.mongo_driver",
        "peekOfCode": "def validate_bson_id(bson_id: str) -> ObjectId | None:\n    try:\n        return ObjectId(bson_id)\n    except:\n        return None",
        "detail": "database.mongo_driver",
        "documentation": {}
    },
    {
        "label": "create_jwt_token",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def create_jwt_token(data: Any) -> str:\n    return jwt.encode(data, _jwt_key, algorithm=\"HS512\")\ndef decode_jwt_token(token: str) -> dict[str, Any]:\n    return jwt.decode(token, _jwt_key, algorithms=['HS512'])\ndef hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "decode_jwt_token",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def decode_jwt_token(token: str) -> dict[str, Any]:\n    return jwt.decode(token, _jwt_key, algorithms=['HS512'])\ndef hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "lib.crypto",
        "description": "lib.crypto",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return hmac.new(_hmac_key.encode(), password.encode(), hashlib.sha512).hexdigest()",
        "detail": "lib.crypto",
        "documentation": {}
    },
    {
        "label": "LLMAuditScore",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMAuditScore(str, Enum):\n    IRRELEVANT = 'IRRELEVANT'\n    PARTIAL = 'PARTIAL'\n    DOCUMENTED = 'DOCUMENTED'\n    CONFORMITY = 'CONFORMITY'\n    NULL = 'NULL'\n    SERVER_ERROR = 'SERVER_ERROR'\nclass LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "LLMIOSAItemResponse",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'\n    score: str = 'NULL'\n    children: list['LLMIOSAItemResponse'] = []\nclass LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "LLMAuditResponse",
        "kind": 6,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "class LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM\n    details: list[LLMIOSAItemResponse] = []\nscore_tags_text_map: dict[str, str] = {\n    LLMAuditScore.IRRELEVANT: \"The input regulation's topics are unrelated to the input manual\",\n    LLMAuditScore.PARTIAL: \"Some of the input regulation's topics are related to the input manual\",\n    LLMAuditScore.DOCUMENTED: \"The input regulations document all the topics mentioned in the manual\",",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "count_score_list_explain",
        "kind": 2,
        "importPath": "lib.gemini",
        "description": "lib.gemini",
        "peekOfCode": "def count_score_list_explain(result: json):\n    summary = \"\"\n    total_keys = 0\n    score = 0\n    score_count_map: dict[str, int] = {\n        LLMAuditScore.IRRELEVANT.value: 0,\n        LLMAuditScore.PARTIAL.value: 0,\n        LLMAuditScore.DOCUMENTED.value: 0,\n        LLMAuditScore.CONFORMITY.value: 0,\n    }",
        "detail": "lib.gemini",
        "documentation": {}
    },
    {
        "label": "agg_score",
        "kind": 2,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "peekOfCode": "def agg_score(items: list[GTP35TIOSAItemResponse]) -> GPT35TAuditScore:\n    \"\"\" computes GPT35T aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return GPT35TAuditScore.NONE\n    return GPT35TAuditScore(round(sum([item.score.value for item in items]) / len(items)))\ndef agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0\n    return sum([item.pct_score for item in items]) / len(items)",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "agg_pct_score",
        "kind": 2,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "peekOfCode": "def agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0\n    return sum([item.pct_score for item in items]) / len(items)\ndef parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "parse_scores_tree",
        "kind": 2,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "peekOfCode": "def parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(\n                GTP35TIOSAItemResponse(\n                    text=parent_text,\n                    score=agg_score(child_items),",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "gpt35t_parse_resp",
        "kind": 2,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "peekOfCode": "def gpt35t_parse_resp(llm_json_res: dict) -> GPT35TAuditResponse:\n    scores_tree = llm_json_res['compliance_scores']\n    comments = llm_json_res['comments']\n    suggestions = llm_json_res['suggestions']\n    modified = llm_json_res['modified']\n    details = parse_scores_tree(scores_tree)\n    return GPT35TAuditResponse(\n        score=agg_score(details),\n        pct_score=agg_pct_score(details),\n        comments=comments,",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "openai_client",
        "kind": 5,
        "importPath": "lib.gpt_35t",
        "description": "lib.gpt_35t",
        "peekOfCode": "openai_client = AsyncOpenAI(api_key=os.environ['GPT_35T_API_KEY'])\ndef agg_score(items: list[GTP35TIOSAItemResponse]) -> GPT35TAuditScore:\n    \"\"\" computes GPT35T aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return GPT35TAuditScore.NONE\n    return GPT35TAuditScore(round(sum([item.score.value for item in items]) / len(items)))\ndef agg_pct_score(items: list[GTP35TIOSAItemResponse]) -> float:\n    \"\"\" computes GPT35T  aggregate score TODO-LATER-GALAL \"\"\"\n    if len(items) == 0:\n        return 0",
        "detail": "lib.gpt_35t",
        "documentation": {}
    },
    {
        "label": "_LOG_TAG_COLOR_MAP",
        "kind": 5,
        "importPath": "lib.log",
        "description": "lib.log",
        "peekOfCode": "_LOG_TAG_COLOR_MAP = {\n    'ERROR': f\"{colorama.Back.RED}[ERROR]{colorama.Style.RESET_ALL}\",\n    'INFO': '[INFO]',\n    'DEBUG': '[DEBUG]',\n}\ndef _format_log(log: Log):\n    return f\"[{log.datetime.strftime('%Y-%m-%d %H:%M:%S')}] {_LOG_TAG_COLOR_MAP[log.level]} [{log.source}] {log.description}\"\nasync def add_log(source: str, level: str, desc: str):\n    log = Log(\n        datetime=datetime.now(),",
        "detail": "lib.log",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "lib.pdf",
        "description": "lib.pdf",
        "peekOfCode": "def clean(text, allowed=list(string.printable)):\n    unicode_dashes = [\n        \"\\u2010\",  # hyphen\n        \"\\u2011\",  # non-breaking hyphen\n        \"\\u2012\",  # en dash\n        \"\\u2013\",  # en dash\n        \"\\u2014\",  # em dash\n        \"\\u2015\",  # horizontal bar\n        \"\\u2212\",  # minus sign\n        \"\\u301c\",  # wave dash",
        "detail": "lib.pdf",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 2,
        "importPath": "lib.pdf",
        "description": "lib.pdf",
        "peekOfCode": "def extract(path):\n    all_pages = []\n    reader = PdfReader(path)\n    pages = reader.pages\n    for i in pages:\n        parts = []\n        def visitor_body(text, cm, tm, fontDict, fontSize):\n            # crop the header and footer\n            y = tm[5]\n            if (y > 40) and (y < 742):",
        "detail": "lib.pdf",
        "documentation": {}
    },
    {
        "label": "AITaskStatus",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITaskStatus(str, Enum):\n    IN_PROGRESS = 'IN_PROGRESS'\n    FINISHED = 'FINISHED'\n    FAILD = 'FAILD'\nclass AITaskType(str, Enum):\n    COMPLIANCE_CHECK = 'COMPLIANCE_CHECK'\n    PARSING_PDF = 'PARSING_PDF'\n    SCANNING_PDF = 'SCANNING_PDF'\nclass AITask(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITaskType",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITaskType(str, Enum):\n    COMPLIANCE_CHECK = 'COMPLIANCE_CHECK'\n    PARSING_PDF = 'PARSING_PDF'\n    SCANNING_PDF = 'SCANNING_PDF'\nclass AITask(BaseModel):\n    id: Optional[str] = None\n    username: str\n    start_datetime: datetime\n    end_datetime: Optional[datetime]\n    task_type: AITaskType",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "AITask",
        "kind": 6,
        "importPath": "models.ai_tasks",
        "description": "models.ai_tasks",
        "peekOfCode": "class AITask(BaseModel):\n    id: Optional[str] = None\n    username: str\n    start_datetime: datetime\n    end_datetime: Optional[datetime]\n    task_type: AITaskType\n    task_status: AITaskStatus\n    json_res: JsonResponse",
        "detail": "models.ai_tasks",
        "documentation": {}
    },
    {
        "label": "ReportSubSection",
        "kind": 6,
        "importPath": "models.audit_reports",
        "description": "models.audit_reports",
        "peekOfCode": "class ReportSubSection(BaseModel):\n    title: str\n    checklist_items: list[IOSAItem] = []\nclass ReportTemplate(BaseModel):\n    title: Optional[str] = None\n    type: RegulationType\n    applicability: str\n    general_guidance: str\n    sub_sections: list[ReportSubSection] = []",
        "detail": "models.audit_reports",
        "documentation": {}
    },
    {
        "label": "ReportTemplate",
        "kind": 6,
        "importPath": "models.audit_reports",
        "description": "models.audit_reports",
        "peekOfCode": "class ReportTemplate(BaseModel):\n    title: Optional[str] = None\n    type: RegulationType\n    applicability: str\n    general_guidance: str\n    sub_sections: list[ReportSubSection] = []",
        "detail": "models.audit_reports",
        "documentation": {}
    },
    {
        "label": "IndexFileType",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class IndexFileType(str, Enum):\n    AIRLINES_MANUAL = 'AIRLINES_MANUAL'\n    AIRLINES_ATTACHMENT = 'AIRLINES_ATTACHMENT'\nFILE_TYPE_PATH_MAP = {\n    IndexFileType.AIRLINES_MANUAL: os.path.join('airlines_files', 'manuals'),\n    IndexFileType.AIRLINES_ATTACHMENT: os.path.join('airlines_files', 'attachments'),\n}\nclass ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "ChatDOCStatus",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'\n    PARSING_FAILD = 'PARSING_FAILD'\n    @classmethod\n    def map_status_code(cls, status_code: int) -> 'ChatDOCStatus':\n        if status_code == 300:\n            return cls.PARSED\n        elif status_code > 0:\n            return cls.PARSING",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FSIndexFile",
        "kind": 6,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "class FSIndexFile(BaseModel):\n    id: Optional[str] = None\n    username: str\n    datetime: datetime\n    file_type: IndexFileType\n    filename: str\n    doc_uuid: str\n    doc_status: ChatDOCStatus",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "FILE_TYPE_PATH_MAP",
        "kind": 5,
        "importPath": "models.fs_index",
        "description": "models.fs_index",
        "peekOfCode": "FILE_TYPE_PATH_MAP = {\n    IndexFileType.AIRLINES_MANUAL: os.path.join('airlines_files', 'manuals'),\n    IndexFileType.AIRLINES_ATTACHMENT: os.path.join('airlines_files', 'attachments'),\n}\nclass ChatDOCStatus(str, Enum):\n    PARSING = 'PARSING'\n    PARSED = 'PARSED'\n    PARSING_FAILD = 'PARSING_FAILD'\n    @classmethod\n    def map_status_code(cls, status_code: int) -> 'ChatDOCStatus':",
        "detail": "models.fs_index",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditScore",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TAuditScore(Enum):\n    FULLY_COMPLIANT = GPT35T_MAX_SCORE\n    PARTIALLY_COMPLIANT = GPT35T_MAX_SCORE - 1\n    NON_COMPLIANT = GPT35T_MAX_SCORE - 2\n    NONE = 0\n    @classmethod\n    def map_audit_score_lbl(cls, audit_score) -> str:\n        if audit_score == cls.FULLY_COMPLIANT:\n            return 'FULLY_COMPLIANT'\n        elif audit_score == cls.PARTIALLY_COMPLIANT:",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GTP35TIOSAItemResponse",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GTP35TIOSAItemResponse(BaseModel):\n    text: str\n    score: GPT35TAuditScore\n    pct_score: float\n    children: list['GTP35TIOSAItemResponse'] = []\n    @computed_field\n    @property\n    def score_tag(self) -> str:\n        return GPT35TAuditScore.map_audit_score_lbl(self.score)\n    @computed_field",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35TAuditResponse",
        "kind": 6,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "class GPT35TAuditResponse(BaseModel):\n    score: GPT35TAuditScore\n    pct_score: float\n    comments: str\n    suggestions: str\n    modified: str\n    details: list[GTP35TIOSAItemResponse] = []\n    @computed_field\n    @property\n    def score_tag(self) -> str:",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "GPT35T_MAX_SCORE",
        "kind": 5,
        "importPath": "models.gpt_35t",
        "description": "models.gpt_35t",
        "peekOfCode": "GPT35T_MAX_SCORE = 3\nclass GPT35TAuditScore(Enum):\n    FULLY_COMPLIANT = GPT35T_MAX_SCORE\n    PARTIALLY_COMPLIANT = GPT35T_MAX_SCORE - 1\n    NON_COMPLIANT = GPT35T_MAX_SCORE - 2\n    NONE = 0\n    @classmethod\n    def map_audit_score_lbl(cls, audit_score) -> str:\n        if audit_score == cls.FULLY_COMPLIANT:\n            return 'FULLY_COMPLIANT'",
        "detail": "models.gpt_35t",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "kind": 6,
        "importPath": "models.httpio",
        "description": "models.httpio",
        "peekOfCode": "class JsonResponse(BaseModel):\n    success: bool = True\n    msg: str = ''\n    data: dict = {}\nclass LLMAuditScore(str, Enum):\n    IRRELEVANT = 'IRRELEVANT'\n    PARTIAL = 'PARTIAL'\n    DOCUMENTED = 'DOCUMENTED'\n    CONFORMITY  = 'CONFORMITY '\n    NULL = 'NULL'",
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "LLMAuditScore",
        "kind": 6,
        "importPath": "models.httpio",
        "description": "models.httpio",
        "peekOfCode": "class LLMAuditScore(str, Enum):\n    IRRELEVANT = 'IRRELEVANT'\n    PARTIAL = 'PARTIAL'\n    DOCUMENTED = 'DOCUMENTED'\n    CONFORMITY  = 'CONFORMITY '\n    NULL = 'NULL'\n    SERVER_ERROR = 'SERVER_ERROR'\nclass LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'",
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "LLMIOSAItemResponse",
        "kind": 6,
        "importPath": "models.httpio",
        "description": "models.httpio",
        "peekOfCode": "class LLMIOSAItemResponse(BaseModel):\n    text: str\n    explanation: str = 'NULL'\n    score: str = 'NULL'\n    children: list['LLMIOSAItemResponse'] = []\nclass LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM",
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "LLMAuditResponse",
        "kind": 6,
        "importPath": "models.httpio",
        "description": "models.httpio",
        "peekOfCode": "class LLMAuditResponse(BaseModel):\n    score: float\n    score_tag: LLMAuditScore\n    score_text: str  # what does the tag mean\n    summary: str  # explaination generated from the LLM\n    details: list[LLMIOSAItemResponse] = []",
        "detail": "models.httpio",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "models.logs",
        "description": "models.logs",
        "peekOfCode": "class Log(BaseModel):\n    id: Optional[str] = None\n    datetime: datetime\n    level: str\n    source: str\n    description: str",
        "detail": "models.logs",
        "documentation": {}
    },
    {
        "label": "ManualRegulationCode",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualRegulationCode(BaseModel):\n    type: RegulationType\n    cat_code: str\n    code: str\n    class Config:\n        use_enum_values = True\nclass ManualSection(BaseModel):\n    header: str\n    text: str\n    regulations_codes: list[ManualRegulationCode]",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "ManualSection",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualSection(BaseModel):\n    header: str\n    text: str\n    regulations_codes: list[ManualRegulationCode]\nclass ManualChapter(BaseModel):\n    name: str\n    sections: list[ManualSection]\nclass StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "ManualChapter",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class ManualChapter(BaseModel):\n    name: str\n    sections: list[ManualSection]\nclass StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    chapters: list[ManualChapter]\nclass UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "StructuredManual",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class StructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    chapters: list[ManualChapter]\nclass UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    pages: list[str]\nclass UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManual",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class UnstructuredManual(BaseModel):\n    id: Optional[str] = None\n    name: str\n    pages: list[str]\nclass UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None\n    name: str\n    page_count: int",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "UnstructuredManualMetaData",
        "kind": 6,
        "importPath": "models.manuals",
        "description": "models.manuals",
        "peekOfCode": "class UnstructuredManualMetaData(BaseModel):\n    id: Optional[str] = None\n    name: str\n    page_count: int",
        "detail": "models.manuals",
        "documentation": {}
    },
    {
        "label": "RegulationType",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationType(str, Enum):\n    IOSA = 'IOSA'\n    ECAR = 'ECAR'\nclass Constrain(BaseModel):\n    text: str\n    children: list['Constrain'] = []\nclass IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "Constrain",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class Constrain(BaseModel):\n    text: str\n    children: list['Constrain'] = []\nclass IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []\n    paragraph: str\n    constraints: list[Constrain]\nclass IOSASection(BaseModel):",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSAItem",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSAItem(BaseModel):\n    code: str\n    guidance: Optional[str] = None\n    iosa_map: list[str] = []\n    paragraph: str\n    constraints: list[Constrain]\nclass IOSASection(BaseModel):\n    name: str\n    code: str\n    applicability: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSASection",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSASection(BaseModel):\n    name: str\n    code: str\n    applicability: str\n    guidance: Optional[str] = None\n    items: list[IOSAItem]\nclass IOSARegulation(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType = RegulationType.IOSA\n    name: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "IOSARegulation",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class IOSARegulation(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType = RegulationType.IOSA\n    name: str\n    effective_date: datetime\n    sections: list[IOSASection]\n    class Config:\n        use_enum_values = True\nclass RegulationsMetaData(BaseModel):\n    id: Optional[str] = None",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationsMetaData",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationsMetaData(BaseModel):\n    id: Optional[str] = None\n    type: RegulationType\n    name: str\n    effective_date: datetime\n    class Config:\n        use_enum_values = True\nclass RegulationsSourceMap(BaseModel):\n    code: str\n    title: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "RegulationsSourceMap",
        "kind": 6,
        "importPath": "models.regulations",
        "description": "models.regulations",
        "peekOfCode": "class RegulationsSourceMap(BaseModel):\n    code: str\n    title: str\n    sub_section: list[str]\n    regulation_id: str",
        "detail": "models.regulations",
        "documentation": {}
    },
    {
        "label": "ServiceResponse",
        "kind": 6,
        "importPath": "models.runtime",
        "description": "models.runtime",
        "peekOfCode": "class ServiceResponse(BaseModel):\n    # TODO: Change This\n    success: Optional[bool] = True\n    status_code: Optional[int] = 200\n    msg: Optional[str] = ''\n    data: Optional[Any] = {}",
        "detail": "models.runtime",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class UserRole(str, Enum):\n    ADMIN = \"ADMIN\"\n    AUDITOR = \"AUDITOR\"\n    AIRLINES = \"AIRLINES\"\nclass ApiUsageKey(str, Enum):\n    GEMINI_AUDITS = 'gemini_audits'\n    CHATDOC_PARSE_DOCS = 'chatdoc_parse_docs'\n    CHATDOC_CHECK_DOCS = 'chatdoc_check_docs'\n    CHATDOC_SCAN_DOCS = 'chatdoc_scan_docs'\nclass UserActivity(BaseModel):",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "ApiUsageKey",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class ApiUsageKey(str, Enum):\n    GEMINI_AUDITS = 'gemini_audits'\n    CHATDOC_PARSE_DOCS = 'chatdoc_parse_docs'\n    CHATDOC_CHECK_DOCS = 'chatdoc_check_docs'\n    CHATDOC_SCAN_DOCS = 'chatdoc_scan_docs'\nclass UserActivity(BaseModel):\n    gemini_audits: int = 0\n    chatdoc_parse_docs: int = 0\n    chatdoc_check_docs: int = 0\n    chatdoc_scan_docs: int = 0",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class UserActivity(BaseModel):\n    gemini_audits: int = 0\n    chatdoc_parse_docs: int = 0\n    chatdoc_check_docs: int = 0\n    chatdoc_scan_docs: int = 0\nclass User(BaseModel):\n    id: Optional[str] = None\n    username: str\n    disp_name: str\n    pass_hash: str",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class User(BaseModel):\n    id: Optional[str] = None\n    username: str\n    disp_name: str\n    pass_hash: str\n    user_role: UserRole\n    phone_number: str\n    email: str\n    activity: UserActivity\n    class Config:",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/activity\"\n_MODULE_ID = 'routes.activity_api'\n_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_MODULE_ID = 'routes.activity_api'\n_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n\n    description: string,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.activity_api",
        "description": "routes.activity_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-logs\")\nasync def get_logs(res: Response, limit: int = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get activity logs.\\n\n    =====================\\n\n    interface Log {\\n\n    id: string,\\n\n    level: string,\\n\n    description: string,\\n\n    datetime: Date,\\n",
        "detail": "routes.activity_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/ai-tasks\"\n_MODULE_ID = 'routes.ai_tasks_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_MODULE_ID = 'routes.ai_tasks_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n\n    msg: string,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.ai_tasks_api",
        "description": "routes.ai_tasks_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/check-task\")\nasync def check_task(res: Response, task_id: str = Body(embed=True), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Gets AI task status with given task_id.\\n\n    ==========================================\\n\n    type AITaskStatus = 'IN_PROGRESS' | 'FINISHED' | 'FAILD';\\n\n    interface JsonResponse {\\n\n    success: boolean,\\n\n    msg: string,\\n\n    data: Object,\\n",
        "detail": "routes.ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/auth\"\n_MODULE_ID = 'routes.auth_api'\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "_MODULE_ID = 'routes.auth_api'\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")\n    db_service_response = await users_database_api.login_user(username, password)",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.auth_api",
        "description": "routes.auth_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/login\")\nasync def login(res: Response, username: str = Body(), password: str = Body()) -> JsonResponse:\n    \"\"\"Handles user login request by validating credentials and generating JWT token.\\n\n    Returns: {..., data: {access_token: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.login\"\n    await log_man.add_log(func_id, 'DEBUG', f\"received login request: username={username}, password={password}\")\n    db_service_response = await users_database_api.login_user(username, password)\n    res.status_code = db_service_response.status_code",
        "detail": "routes.auth_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/llm\"\n_MODULE_ID = 'routes.llm_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_MODULE_ID = 'routes.llm_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n\n    score_tag: 'FULLY_COMPLIANT' | 'PARTIALLY_COMPLIANT' | 'NON_COMPLIANT' | 'NONE',\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.llm_api",
        "description": "routes.llm_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/iosa-audit\")\nasync def iosa_audit(res: Response, regulation_id: str = Body(), checklist_code: str = Body(), text: str = Body(), x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Audit text against checklist_code from regulation_id using AI.\\n\n    =================================================================\\n\n    interface LLMIOSAItemResponse {\\n\n    text: string,\\n\n    score: 3 | 2 | 1 | 0,\\n\n    score_tag: 'FULLY_COMPLIANT' | 'PARTIALLY_COMPLIANT' | 'NON_COMPLIANT' | 'NONE',\\n\n    score_text: string,\\n",
        "detail": "routes.llm_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/manuals\"\n_MODULE_ID = 'routes.manuals_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {doc_uuid: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.parse_pdf\"",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_MODULE_ID = 'routes.manuals_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {doc_uuid: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.parse_pdf\"\n    await log_man.add_log(func_id, \"DEBUG\", f\"received parse pdf request: {file.filename}\")",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {doc_uuid: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.parse_pdf\"\n    await log_man.add_log(func_id, \"DEBUG\", f\"received parse pdf request: {file.filename}\")\n    # authorize user",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.manuals_api",
        "description": "routes.manuals_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/parse-pdf\")\nasync def parse_pdf(file: UploadFile, res: Response, x_auth=Header(alias='X-Auth', default=None)):\n    \"\"\"Parse PDF file, store it in the database and return it's id.\\n\n    Returns: {..., data: {doc_uuid: string}}\n    \"\"\"\n    func_id = f\"{_MODULE_ID}.parse_pdf\"\n    await log_man.add_log(func_id, \"DEBUG\", f\"received parse pdf request: {file.filename}\")\n    # authorize user\n    auth_service_response = await security_man.authorize_api(x_auth, _ALLOWED_USERS, func_id)",
        "detail": "routes.manuals_api",
        "documentation": {}
    },
    {
        "label": "_ROOT_ROUTE",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_ROOT_ROUTE = f\"{os.getenv('API_ROOT')}/regulations\"\n_MODULE_ID = 'routes.regulations_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "_MODULE_ID",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_MODULE_ID = 'routes.regulations_api'\n_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "_ALLOWED_USERS",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "_ALLOWED_USERS = [UserRole.ADMIN, UserRole.AUDITOR]\nrouter = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n\n    name: string,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.regulations_api",
        "description": "routes.regulations_api",
        "peekOfCode": "router = APIRouter()\n@router.post(f\"{_ROOT_ROUTE}/get-options\")\nasync def get_options(res: Response, x_auth=Header(alias='X-Auth', default=None)) -> JsonResponse:\n    \"\"\"Get all regulations check lists meta data.\\n\n    =============================================\\n\n    interface RegulationsOption {\\n\n    id: string,\\n\n    type: string,\\n\n    name: string,\\n\n    effective_date: Date,\\n",
        "detail": "routes.regulations_api",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nimport lib.crypto as crypto_man\nfrom models.users import *\nfrom scripts.scripts_config import *",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "add_user_account",
        "kind": 2,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "def add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,\n        phone_number=phone_number,\n        email=f\"{username}@aerosync.com\"\n    )",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "client = pymongo.MongoClient(f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@{SERVER_ADDR}\")\ndb = client.get_database(os.environ['IVDMS_DB'])\nprint('Connected to MDB database')\ndef add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "scripts.admin_actions",
        "description": "scripts.admin_actions",
        "peekOfCode": "db = client.get_database(os.environ['IVDMS_DB'])\nprint('Connected to MDB database')\ndef add_user_account(username: str, password: str, disp_name: str, user_role: UserRole, phone_number: str = '+201001000000'):\n    pass_hash = crypto_man.hash_password(password)\n    user = User(\n        username=username,\n        disp_name=disp_name,\n        pass_hash=pass_hash,\n        user_role=user_role,\n        phone_number=phone_number,",
        "detail": "scripts.admin_actions",
        "documentation": {}
    },
    {
        "label": "upload_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef get_suggs(doc_id: str):",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "check_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef get_suggs(doc_id: str):\n    api_url = f\"{SUGGS_API}\"\n    http_res = requests.get(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "get_suggs",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def get_suggs(doc_id: str):\n    api_url = f\"{SUGGS_API}\"\n    http_res = requests.get(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef del_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.delete(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "del_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def del_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.delete(api_url, headers=API_HEADERS, params={'upload_id': doc_id})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        \"upload_id\": doc_id,\n        \"question\": question,\n        \"stream\": True,",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "ask_doc",
        "kind": 2,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "def ask_doc(doc_id: str, question: str):\n    json_req = {\n        \"upload_id\": doc_id,\n        \"question\": question,\n        \"stream\": True,\n        \"search_entire_doc\": True,\n        \"detailed_citation\": True,\n        \"language\": \"en\",\n        \"model_type\": \"gpt-4\"\n    }",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "API_HEADERS",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "API_HEADERS = {'Authorization': f\"Bearer {os.environ['CHAT_DOC_API_KEY']}\"}\nUPLOAD_API = 'https://api.chatdoc.com/api/v2/documents/upload'\nDOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "UPLOAD_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "UPLOAD_API = 'https://api.chatdoc.com/api/v2/documents/upload'\nDOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "DOCS_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "DOCS_API = 'https://api.chatdoc.com/api/v2/documents'\nSUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "SUGGS_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "SUGGS_API = 'https://api.chatdoc.com/api/v2/questions/suggested'\nASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "ASK_API",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "ASK_API = 'https://api.chatdoc.com/api/v2/questions'\nDOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "DOC_ID",
        "kind": 5,
        "importPath": "scripts.chat_doc_api",
        "description": "scripts.chat_doc_api",
        "peekOfCode": "DOC_ID = os.environ['COMPLETE_CHAT_DOC_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef check_doc(doc_id: str):\n    api_url = f\"{DOCS_API}/{doc_id}\"\n    http_res = requests.get(api_url, headers=API_HEADERS)\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))",
        "detail": "scripts.chat_doc_api",
        "documentation": {}
    },
    {
        "label": "upload_doc",
        "kind": 2,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "def upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {\n                'role': 'user',",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "ask_doc",
        "kind": 2,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "def ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {\n                'role': 'user',\n                'content': question,\n            }\n        ]\n    }",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "API_HEADERS",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "API_HEADERS = {'x-api-key': os.environ['CHAT_PDF_API_KEY']}\nUPLOAD_API = 'https://api.chatpdf.com/v1/sources/add-file'\nASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "UPLOAD_API",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "UPLOAD_API = 'https://api.chatpdf.com/v1/sources/add-file'\nASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "ASK_API",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "ASK_API = 'https://api.chatpdf.com/v1/chats/message'\nDOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "DOC_ID",
        "kind": 5,
        "importPath": "scripts.chat_pdf_api",
        "description": "scripts.chat_pdf_api",
        "peekOfCode": "DOC_ID = os.environ['COMPLETE_CHAT_PDF_UUID']\ndef upload_doc(filename: str):\n    http_res = requests.post(UPLOAD_API, headers=API_HEADERS, files={'file': open(filename, 'rb')})\n    json_res = json.loads(http_res.content.decode())\n    print(json.dumps(json_res, indent=2))\ndef ask_doc(doc_id: str, question: str):\n    json_req = {\n        'sourceId': doc_id,\n        'messages': [\n            {",
        "detail": "scripts.chat_pdf_api",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "scripts.get_remote_logs",
        "description": "scripts.get_remote_logs",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']\nprint(f\"API_URL={API_URL}\")",
        "detail": "scripts.get_remote_logs",
        "documentation": {}
    },
    {
        "label": "status_msg",
        "kind": 5,
        "importPath": "scripts.get_remote_logs",
        "description": "scripts.get_remote_logs",
        "peekOfCode": "status_msg = json.loads(requests.get(f\"{API_URL}/test\").content.decode())\nprint(status_msg)\nif status_msg['success']:\n    print('fetching system logs...')\n    api_url = f\"{API_URL}/activity/get-logs\"\n    admin_access_token = login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    json_obj = json.loads(http_res.content.decode())\n    json_str = json.dumps(json_obj['data']['logs'], indent=2)",
        "detail": "scripts.get_remote_logs",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.regulations import *\n# autopep8: on\ndef clean(text, allowed=list(string.printable)):",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def clean(text, allowed=list(string.printable)):\n    unicode_dashes = [\n        \"\\u2010\",  # hyphen\n        \"\\u2011\",  # non-breaking hyphen\n        \"\\u2012\",  # en dash\n        \"\\u2013\",  # en dash\n        \"\\u2014\",  # em dash\n        \"\\u2015\",  # horizontal bar\n        \"\\u2212\",  # minus sign\n        \"\\u301c\",  # wave dash",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract(path):\n    all_pages = []\n    reader = PdfReader(path)\n    pages = reader.pages\n    for i in pages:\n        parts = []\n        def visitor_body(text, cm, tm, fontDict, fontSize):\n            # crop the header and footer\n            y = tm[5]\n            # these sohuld be changed for different pdf headers",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "contains_span",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def contains_span(span, span_array):\n    for i in span_array:\n        if span[0] == i[0]:\n            return True\n    return False\ndef contains_span_intext(span, span_array):\n    for i in span_array:\n        if span[0] == i[0] + 2:\n            return True\n    return False",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "contains_span_intext",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def contains_span_intext(span, span_array):\n    for i in span_array:\n        if span[0] == i[0] + 2:\n            return True\n    return False\ndef check_type(text):\n    romans = \"ii|iii|iv|v|vi|vii|viii|ix|x|xi|xii|xiii|xiv|xv|xvi|xvii|xviii|xix|xx|xxi|xxii|xxiii|xxiv|xxv|xxvi|xxvii|xxviii|xxix|xxx\"\n    alphas = \"abcdefghijklmnopqrstuvwxyz\"\n    if text[0] == \"(\":\n        second_brak = text[:].find(\")\")",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "check_type",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def check_type(text):\n    romans = \"ii|iii|iv|v|vi|vii|viii|ix|x|xi|xii|xiii|xiv|xv|xvi|xvii|xviii|xix|xx|xxi|xxii|xxiii|xxiv|xxv|xxvi|xxvii|xxviii|xxix|xxx\"\n    alphas = \"abcdefghijklmnopqrstuvwxyz\"\n    if text[0] == \"(\":\n        second_brak = text[:].find(\")\")\n        if second_brak == -1:\n            return \"t\"\n        sub = text[1:second_brak]\n        if sub == \"i\":\n            return \"i\"",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "parse_paragraph",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def parse_paragraph(paragraph):\n    text = paragraph[:]\n    splitter = r\"\\.\\n|:\\n|;\\n| or\\n\"\n    items = re.split(splitter, text)\n    items = [i for i in items if i]\n    items_labled = []\n    last = None\n    i = None\n    for i in range(len(items) - 1):\n        item_type_here = check_type(items[i])",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract_section_header",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract_section_header(text, first_flt_span, filename):\n    section_name_reg = r\"Section (\\d+) - ([\\w\\s]+) \\(([\\w]+)\\)\\n\"\n    general_guidence_reg = r\"General Guidance\\n\"\n    applicability_reg = r\"Applicability\\n\"\n    section_header_text = text[0:first_flt_span].strip(\"\\n\").strip()\n    section_name = (\n        re.match(section_name_reg, section_header_text).group()[:-1].strip(\"\\n\").strip()\n    )\n    section_code = section_name[section_name.find(\"(\") + 1: -1].strip(\"\\n\").strip()\n    gg = re.search(general_guidence_reg, section_header_text).span()[0]",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "extract_section_text",
        "kind": 2,
        "importPath": "scripts.parse_iosa_section",
        "description": "scripts.parse_iosa_section",
        "peekOfCode": "def extract_section_text(text):\n    flts = r\"(FLT\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))*\"\n    in_text_flts_beg = (\n        r\". (FLT\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))*\"\n    )\n    in_text_flts_end = (\n        r\"(FLT\\s*)([0-9]+(\\.[0-9]+)*)([A-Za-z]*)(\\-([0-9]+(\\.[0-9]+)*)([A-Za-z]*))* .\"\n    )\n    auditor_actions_reg = r\"\\nAuditor Actions\\n\"\n    Guidence_reg = r\"\\nGuidance\\n\"",
        "detail": "scripts.parse_iosa_section",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "SERVER_ADDR",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "SERVER_ADDR = 'iv-dms.duckdns.org'\nSERVER_PORT = 8080\nAPI_URL = f\"https://{SERVER_ADDR}/api\"\n# API_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "SERVER_PORT = 8080\nAPI_URL = f\"https://{SERVER_ADDR}/api\"\n# API_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "scripts.scripts_config",
        "description": "scripts.scripts_config",
        "peekOfCode": "API_URL = f\"https://{SERVER_ADDR}/api\"\n# API_URL = f\"http://{SERVER_ADDR}:{SERVER_PORT}/api\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{API_URL}/auth/login\"\n    json_req_body = {\n        'username': username,\n        'password': password,\n    }\n    http_res = requests.post(api_url, json=json_req_body)\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "scripts.scripts_config",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.users import *\nfrom models.regulations import *\nfrom models.manuals import *",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_routine",
        "kind": 2,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "def seed_routine():\n    print(\"seeding users...\")\n    db.get_collection(\"users\").insert_many([x.model_dump() for x in seed_users])\n    print(\"creating users indexes...\")\n    db.get_collection(\"users\").create_index(\"username\", unique=True)\n    db.get_collection(\"users\").create_index(\"email\", unique=True)\n    print(\"seeding regulations index...\")\n    db.get_collection(\"regulations\").insert_one(seed_regulations[0].model_dump())\n    mdb_result = db.get_collection(\"regulations\").insert_one(\n        seed_regulations[1].model_dump()",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "client = pymongo.MongoClient(\n    f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@127.0.0.1\"\n)\ndb = client.get_database(os.environ[\"IVDMS_DB\"])\n# users schema\nseed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",\n        pass_hash=\"86d74596bb4c2f6b63ae7c09c212a7ed824ab15371ec06a2126dffc3aaa191659478e432c458d5b6a7c0b21b5bf2120c91480c27e78cf94935135d8c022f42f7\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "db = client.get_database(os.environ[\"IVDMS_DB\"])\n# users schema\nseed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",\n        pass_hash=\"86d74596bb4c2f6b63ae7c09c212a7ed824ab15371ec06a2126dffc3aaa191659478e432c458d5b6a7c0b21b5bf2120c91480c27e78cf94935135d8c022f42f7\",\n        user_role=UserRole.AUDITOR,\n        phone_number=\"+201001000000\",\n        email=\"cwael@aerosync.com\",",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_users",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_users = [\n    User(\n        username=\"cwael\",\n        disp_name=\"Captin Wael\",\n        pass_hash=\"86d74596bb4c2f6b63ae7c09c212a7ed824ab15371ec06a2126dffc3aaa191659478e432c458d5b6a7c0b21b5bf2120c91480c27e78cf94935135d8c022f42f7\",\n        user_role=UserRole.AUDITOR,\n        phone_number=\"+201001000000\",\n        email=\"cwael@aerosync.com\",\n        activity=UserActivity(),\n    ),",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_regulations",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_regulations = [\n    IOSARegulation(type=RegulationType.IOSA, name='IOSA Standards Manual (ISM) Ed 15', effective_date=datetime.strptime('1 Nov 2023', '%d %b %Y'), sections=[\n        IOSASection(\n            name=\"Section 2 Flight Operations\",\n            code=\"FLT\",\n            applicability=\"addresses safety and security requirements for flight operations, and is applicable to an operator that uses two-pilot, multi-engine aircraft with a maximum certificated takeoff mass in excess of 5,700 kg (12,566 lbs.).\",\n            guidance=\"The definitions of technical terms used in this ISM Section 2, as well as the list of abbreviations and acronyms, are found in the IATA Reference Manual for Audit Programs (IRM).\",\n            order=2,\n            items=[\n                IOSAItem(",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_unstructured_manuals",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_unstructured_manuals = [\n    UnstructuredManual(name=\"Example Manual 1\", pages=[]),\n    UnstructuredManual(\n        name=\"Example Manual 2\",\n        pages=[\n            \"page1 content\",\n            \"page2 content\",\n            \"page3 content\",\n        ],\n    ),",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_fs_index_files",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_fs_index_files = [\n    FSIndexFile(\n        username=\"cwael\",\n        datetime=datetime.now(),\n        file_type=IndexFileType.AIRLINES_MANUAL,\n        filename='nesma_org_cos_rad.pdf',\n        doc_uuid=os.environ['INVALID_CHAT_DOC_UUID'],\n        doc_status=ChatDOCStatus.PARSED,\n    ),\n    FSIndexFile(",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_ai_tasks",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_ai_tasks = [\n    AITask(\n        username='cwael',\n        start_datetime=datetime.now(),\n        end_datetime=datetime.now(),\n        task_type=AITaskType.COMPLIANCE_CHECK,\n        task_status=AITaskStatus.FINISHED,\n        json_res=JsonResponse(),\n    ),\n    AITask(",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "seed_log",
        "kind": 5,
        "importPath": "scripts.seed_schema",
        "description": "scripts.seed_schema",
        "peekOfCode": "seed_log = Log(\n    datetime=datetime.now(),\n    level=\"DEBUG\",\n    source=\"seed_schema\",\n    description=\"seeding database\",\n)\ndef seed_routine():\n    print(\"seeding users...\")\n    db.get_collection(\"users\").insert_many([x.model_dump() for x in seed_users])\n    print(\"creating users indexes...\")",
        "detail": "scripts.seed_schema",
        "documentation": {}
    },
    {
        "label": "print_err_log",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True\n    except:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "is_port_open",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True\n    except:\n        return False\n    finally:\n        _socket.close()",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "def run_test(iter_count: int, thread_id: int = 0) -> int:\n    for i in range(iter_count):\n        print(f\"[THREAD-{thread_id}] Starting iteration {i}\")\n        test_exit_code = os.system('pytest')\n        if test_exit_code != 0:\n            print_err_log(f\"[THREAD-{thread_id}] Test iteration {i} faild\")\n            return 1\n    return 0\n# check current directory\ndir_content = glob.glob('*')",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "TEST_COUNT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "TEST_COUNT = 10\nTHREAD_COUNT = 10\nSERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "THREAD_COUNT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "THREAD_COUNT = 10\nSERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_PORT = 8080\nSERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_IP",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_IP = '127.0.0.1'\nSERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "SERVER_URL",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "SERVER_URL = f\"http://{SERVER_IP}:{SERVER_PORT}\"\nAPI_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "API_URL = f\"{SERVER_URL}/api\"\ndef print_err_log(msg: str):\n    err_tag = f\"{colorama.Fore.RED}[ERROR]{colorama.Style.RESET_ALL}\"\n    print(f\"{err_tag}: {msg}\")\ndef is_port_open(host: str, port: int) -> bool:\n    try:\n        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        _socket.settimeout(2)\n        _socket.connect((host, port))\n        return True",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "dir_content",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "dir_content = glob.glob('*')\nif 'test' not in dir_content:\n    print_err_log('No tests found in this directory')\n    sys.exit(1)\n# check if server port is open\nif not is_port_open(SERVER_IP, SERVER_PORT):\n    print_err_log(f\"Server {SERVER_URL} is offline\")\n    sys.exit(1)\n# check http server\napi_url = f\"{API_URL}/test\"",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "api_url",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "api_url = f\"{API_URL}/test\"\nhttp_res = requests.get(api_url)\nif http_res.status_code != 200:\n    print_err_log(f\"Local server error [status_code = {http_res.status_code}]\")\n    sys.exit(1)\njson_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "http_res",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "http_res = requests.get(api_url)\nif http_res.status_code != 200:\n    print_err_log(f\"Local server error [status_code = {http_res.status_code}]\")\n    sys.exit(1)\njson_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]\nif test_mode == '-p':",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "json_res_body",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "json_res_body = json.loads(http_res.content.decode())\nif not (json_res_body['success'] and json_res_body['msg'] == 'server online'):\n    print_err_log(f\"Local server error [json_res_body = {json_res_body}]\")\n    sys.exit(1)\ntest_mode = sys.argv[1]\nif test_mode == '-p':\n    # run parallel stress test\n    test_per_thread = TEST_COUNT // THREAD_COUNT\n    thread_list: list[threading.Thread] = [threading.Thread(target=run_test, args=(test_per_thread, i)) for i in range(THREAD_COUNT)]\n    for thread in thread_list:",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "test_mode",
        "kind": 5,
        "importPath": "scripts.stress",
        "description": "scripts.stress",
        "peekOfCode": "test_mode = sys.argv[1]\nif test_mode == '-p':\n    # run parallel stress test\n    test_per_thread = TEST_COUNT // THREAD_COUNT\n    thread_list: list[threading.Thread] = [threading.Thread(target=run_test, args=(test_per_thread, i)) for i in range(THREAD_COUNT)]\n    for thread in thread_list:\n        thread.start()\n    for thread in thread_list:\n        thread.join()\nelif test_mode == '-s':",
        "detail": "scripts.stress",
        "documentation": {}
    },
    {
        "label": "load_root_path",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def load_root_path():\n    file_dir = os.path.abspath(__file__)\n    lv1_dir = os.path.dirname(file_dir)\n    root_dir = os.path.dirname(lv1_dir)\n    sys.path.append(root_dir)\nload_root_path()\nload_dotenv()\nfrom models.gpt_35t import *\n# autopep8: on\ngpt35t_json_res = {",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "agg_score",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def agg_score(items: list[GTP35TIOSAItemResponse]):\n    \"\"\" computes GPT35T aggregate score TODO-GALAL \"\"\"\n    return round(sum([item.score for item in items]) / len(items))\ndef parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(GTP35TIOSAItemResponse(text=parent_text, score=agg_score(items), children=child_items))",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "parse_scores_tree",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def parse_scores_tree(scores_tree: dict) -> list[GTP35TIOSAItemResponse]:\n    items: list[GTP35TIOSAItemResponse] = []\n    for key, value in scores_tree.items():\n        if isinstance(value, dict):\n            parent_text = key\n            child_items = parse_scores_tree(value)\n            items.append(GTP35TIOSAItemResponse(text=parent_text, score=agg_score(items), children=child_items))\n        elif isinstance(value, int):\n            items.append(GTP35TIOSAItemResponse(text=key, score=value))\n    return items",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "gpt35t_output_format",
        "kind": 2,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "def gpt35t_output_format(llm_json_res: dict) -> GPT35TAuditResponse:\n    scores_tree = llm_json_res['compliance_scores']\n    comments = llm_json_res['comments']\n    details = parse_scores_tree(scores_tree)\n    return GPT35TAuditResponse(\n        score=agg_score(details),\n        comments=comments,\n        details=details\n    )\ngpt35t_output_format(gpt35t_json_res)",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "gpt35t_json_res",
        "kind": 5,
        "importPath": "scripts.utils",
        "description": "scripts.utils",
        "peekOfCode": "gpt35t_json_res = {\n    \"compliance_scores\": {\n        \"Operator shall have an initial training program for instructors, evaluators and line check airmen\": {\n            \"i) An instructor course\": {\n                \"a) The fundamentals of teaching and evaluation\": 2,\n                \"b) Lesson plan management\": 2,\n                \"c) Briefing and debriefing\": 2,\n                \"d) Human performance issues\": 2,\n                \"e) Company policies and procedures\": 2,\n                \"f) Simulator serviceability and training in simulator operation\": 2,",
        "detail": "scripts.utils",
        "documentation": {}
    },
    {
        "label": "test_get_logs_lock",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_get_logs_lock():\n    api_url = f\"{_test_config.get_api_url()}/activity/get-logs\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\n    user_access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {user_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_get_logs",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_get_logs():\n    api_url = f\"{_test_config.get_api_url()}/activity/get-logs\"\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'limit': 10})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'logs' in json_res_body['data']\n    logs = json_res_body['data']['logs']",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_activity",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_get_user_activity():\n    api_url = f\"{_test_config.get_api_url()}/activity/get-user-activity\"\n    admin_access_token = _test_config.login_user('eslam', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'activity' in json_res_body['data']\n    activity = json_res_body['data']['activity']",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_increment_gemini_user_activity",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_increment_gemini_user_activity():\n    username = 'eslam'\n    # login info\n    admin_access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    # get activity before increment\n    api_url = f\"{_test_config.get_api_url()}/activity/get-user-activity\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_increment_chatdoc_parse_user_activity",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_increment_chatdoc_parse_user_activity():\n    username = 'eslam'\n    # login info\n    admin_access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    # get activity before increment\n    api_url = f\"{_test_config.get_api_url()}/activity/get-user-activity\"\n    http_res = requests.post(api_url, headers=http_headers)\n    print(http_res.text)\n    assert http_res.status_code == 200",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_increment_chatdoc_check_user_activity",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_increment_chatdoc_check_user_activity():\n    username = 'eslam'\n    # login info\n    admin_access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    # get activity before increment\n    api_url = f\"{_test_config.get_api_url()}/activity/get-user-activity\"\n    http_res = requests.post(api_url, headers=http_headers)\n    print(http_res.text)\n    assert http_res.status_code == 200",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_increment_chatdoc_scan_user_activity",
        "kind": 2,
        "importPath": "test.test_activity_api",
        "description": "test.test_activity_api",
        "peekOfCode": "def test_increment_chatdoc_scan_user_activity():\n    # login info\n    username = 'eslam'\n    admin_access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {admin_access_token}\"}\n    # get activity before increment\n    api_url = f\"{_test_config.get_api_url()}/activity/get-user-activity\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_activity_api",
        "documentation": {}
    },
    {
        "label": "test_check_ai_task_status_api_lock",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_check_ai_task_status_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/check-task\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'task_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_check_ai_task_status_api_invalid_task_info():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_check_ai_task_status_api_invalid_task_info",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_check_ai_task_status_api_invalid_task_info():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/check-task\"\n    http_res = requests.post(api_url, headers=http_headers, json={'task_id': '000000000000000000000000'})\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'AI Task not Found')\ndef test_get_all_ai_tasks_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_all_ai_tasks_api_lock",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_all_ai_tasks_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_all_ai_tasks_api_success():\n    username = 'cwael'\n    access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_all_ai_tasks_api_success",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_all_ai_tasks_api_success():\n    username = 'cwael'\n    access_token = _test_config.login_user(username, 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'ai_tasks' in json_res_body['data']\n    if len(json_res_body['data']['ai_tasks']) > 0:",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_get_ai_task_status_api_success",
        "kind": 2,
        "importPath": "test.test_ai_tasks_api",
        "description": "test.test_ai_tasks_api",
        "peekOfCode": "def test_get_ai_task_status_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get ai tasks options\n    api_url = f\"{_test_config.get_api_url()}/ai-tasks/get-all-tasks\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'ai_tasks' in json_res_body['data']\n    assert len(json_res_body['data']['ai_tasks']) > 0",
        "detail": "test.test_ai_tasks_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_failed_invalid_account",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_failed_invalid_account():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'fake_user',\n        'password': 'fake_password',\n    })\n    assert http_res.status_code == 401\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Login Failed, Invalid User Credentials')\ndef test_auth_api_login_failed_invalid_password():",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_failed_invalid_password",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_failed_invalid_password():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'air_cairo',\n        'password': 'fake_password',\n    })\n    assert http_res.status_code == 401\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Login Failed, Invalid User Credentials')\ndef test_auth_api_login_success():",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "test_auth_api_login_success",
        "kind": 2,
        "importPath": "test.test_auth_api",
        "description": "test.test_auth_api",
        "peekOfCode": "def test_auth_api_login_success():\n    api_url = f\"{_test_config.get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': 'cwael',\n        'password': 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV',\n    })\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'access_token' in json_res_body['data']",
        "detail": "test.test_auth_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_lock",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/llm/iosa-audit\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n        'text': 'some text',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success_low_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success_low_score():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_llm_api_success_high_score",
        "kind": 2,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "def test_llm_api_success_high_score():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "LLM_SCORE_TH",
        "kind": 5,
        "importPath": "test.test_llm_api",
        "description": "test.test_llm_api",
        "peekOfCode": "LLM_SCORE_TH = 0.15\ndef test_llm_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/llm/iosa-audit\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n        'text': 'some text',\n    })\n    assert http_res.status_code == 403",
        "detail": "test.test_llm_api",
        "documentation": {}
    },
    {
        "label": "test_parse_pdf_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_parse_pdf_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_manual.pdf', 'rb')})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_page_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'manual_id': '000000000000000000000000',\n        'page_order': 0,\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_manual_not_found",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_manual_not_found():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-page\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'manual_id': '000000000000000000000000',\n        'page_order': 0,\n    })\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_page_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_page_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get manuals options\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'manuals_options' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_meta_data_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_meta_data_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-meta-data\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'manual_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_meta_data_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_meta_data_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_meta_data_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get manuals options\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'manuals_options' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_chat_doc_parse_api",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_chat_doc_parse_api():\n    # test parse doc\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/nesma_org_cos_rad.pdf', 'rb')})\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'doc_uuid' in json_res_body['data']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_chat_doc_scan_api",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_chat_doc_scan_api():\n    load_dotenv()\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_chat_doc_parse_api_bad_file_type",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_chat_doc_parse_api_bad_file_type():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/parse-pdf\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, files={'file': open('data/sample_manual.txt', 'rb')})\n    assert http_res.status_code == 409\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Bad File Extention')\n    # reset user    \n    get_database = _test_config.get_database() ",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_manuals_api_lock",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_user_manuals_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_user_manuals_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_manuals_api_success",
        "kind": 2,
        "importPath": "test.test_manuals_api",
        "description": "test.test_manuals_api",
        "peekOfCode": "def test_get_user_manuals_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    api_url = f\"{_test_config.get_api_url()}/manuals/get-manuals\"\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert 'files' in json_res_body['data']\n    if len(json_res_body['data']['files']) > 0:\n        example_file = json_res_body['data']['files'][0]",
        "detail": "test.test_manuals_api",
        "documentation": {}
    },
    {
        "label": "test_get_options_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_options_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_options_api_success():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_options_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_options_api_success():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']\n    if len(json_res_body['data']['regulations_options']) > 0:",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={'regulation_id': '000000000000000000000000'})\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_codes_api_regulation_not_found():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_regulation_not_found",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_regulation_not_found():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-codes\"\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    http_res = requests.post(api_url, headers=http_headers, json={'regulation_id': '000000000000000000000000'})\n    assert http_res.status_code == 404\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Regulation Codes not Found')\ndef test_get_codes_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_codes_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_codes_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_code_iosa_map_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_code_iosa_map_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-iosa-map\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_code_iosa_map_api_success",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_code_iosa_map_api_success():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_iosa_checklist_api_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_iosa_checklist_api_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-iosa-checklist\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n        'checklist_code': 'XXX 0.0.0',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_iosa_checklist_api_sucess",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_iosa_checklist_api_sucess():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_2",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_2():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_lock",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_lock():\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-checklist-template-options\"\n    http_headers = {'X-Auth': 'Bearer fake_token'}\n    http_res = requests.post(api_url, headers=http_headers, json={\n        'regulation_id': '000000000000000000000000',\n    })\n    assert http_res.status_code == 403\n    json_res_body = json.loads(http_res.content.decode())\n    assert (not json_res_body['success'] and json_res_body['msg'] == 'Unauthorized API Access [Invalid Token]')\ndef test_get_checklist_template_options_empty_source_map():",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_empty_source_map",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_empty_source_map():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_get_checklist_template_options_valid_source_map",
        "kind": 2,
        "importPath": "test.test_regulations_api",
        "description": "test.test_regulations_api",
        "peekOfCode": "def test_get_checklist_template_options_valid_source_map():\n    access_token = _test_config.login_user('cwael', 'CgJhxwieCc7QEyN3BB7pmvy9MMpseMPV')\n    http_headers = {'X-Auth': f\"Bearer {access_token}\"}\n    # get regulations options\n    api_url = f\"{_test_config.get_api_url()}/regulations/get-options\"\n    http_res = requests.post(api_url, headers=http_headers)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert json_res_body['success']\n    assert 'regulations_options' in json_res_body['data']",
        "detail": "test.test_regulations_api",
        "documentation": {}
    },
    {
        "label": "test_server_online",
        "kind": 2,
        "importPath": "test.test_server_online",
        "description": "test.test_server_online",
        "peekOfCode": "def test_server_online():\n    api_url = f\"{_test_config.get_api_url()}/test\"\n    http_res = requests.get(api_url)\n    assert http_res.status_code == 200\n    json_res_body = json.loads(http_res.content.decode())\n    assert (json_res_body['success'] and json_res_body['msg'] == 'server online')",
        "detail": "test.test_server_online",
        "documentation": {}
    },
    {
        "label": "get_api_url",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': username,\n        'password': password,\n    })",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "get_file_server_url",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': username,\n        'password': password,\n    })\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': username,\n        'password': password,\n    })\n    json_res_body = json.loads(http_res.content.decode())\n    return json_res_body['data']['access_token']\ndef get_database():\n    connection_string = f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@127.0.0.1\"",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "def get_database():\n    connection_string = f\"mongodb://{os.environ['MDB_USERNAME']}:{os.environ['MDB_PASSWORD']}@127.0.0.1\"\n    mdb_client = MongoClient(connection_string)\n    if mdb_client:\n        return mdb_client[os.environ['IVDMS_DB']]\n    return None\n# test data\nexample_prompt = '''The Flight Instructors, Check Airman and Examiners are considered to be the foundation and\nthe pillars on which the entire safe and efficient flight operations stand.\nCareful selection system for Instructor Pilot, Check Airman and Examiners is developed to",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "_SERVER_ADDR",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "_SERVER_ADDR = '127.0.0.1'\n_SERVER_PORT = 8080\ndef get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': username,",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "_SERVER_PORT",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "_SERVER_PORT = 8080\ndef get_api_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}/api\"\ndef get_file_server_url():\n    return f\"http://{_SERVER_ADDR}:{_SERVER_PORT}\"\ndef login_user(username: str, password: str) -> str:\n    api_url = f\"{get_api_url()}/auth/login\"\n    http_res = requests.post(api_url, json={\n        'username': username,\n        'password': password,",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "example_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "example_prompt = '''The Flight Instructors, Check Airman and Examiners are considered to be the foundation and\nthe pillars on which the entire safe and efficient flight operations stand.\nCareful selection system for Instructor Pilot, Check Airman and Examiners is developed to\nensure a high standard product of the training and checking process. The Instructor Pilot must\nbe basically a Role Model.\nThe initial selection therefore shall be based on many factors, included but not limited to:\n1) Desire to do the job.\n2) Self-discipline.\n3) Experience and proficiency.\n4) High standard of aviation knowledge.",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "dummy_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "dummy_prompt = \"\"\"The module used to set the rules by which the system will restrict crew assignment. Rule set\nmanagement is used to enter crew assignment regulations and standards. Rule setting\ncompliance with regulations is the responsibility of the chief pilot and shall be restricted to his\naccess. Crew scheduling department shall have no access to change the rules.\"\"\"\nvalid_prompt = \"\"\"English and Arabic are the designated common language used by all Nesma Airlines flight\ncrewmembers for communication.\nPersonnel who demonstrate proficiency below expert level (ICAO Level 6) should be formally\nevaluated at intervals in accordance with ECAR 63.9 and ICAO Annex 1 item 1.2.9.6 as\nfollows:\n▪ Those demonstrated language proficiency at the operational level (Level 4) should be",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "valid_prompt",
        "kind": 5,
        "importPath": "test._test_config",
        "description": "test._test_config",
        "peekOfCode": "valid_prompt = \"\"\"English and Arabic are the designated common language used by all Nesma Airlines flight\ncrewmembers for communication.\nPersonnel who demonstrate proficiency below expert level (ICAO Level 6) should be formally\nevaluated at intervals in accordance with ECAR 63.9 and ICAO Annex 1 item 1.2.9.6 as\nfollows:\n▪ Those demonstrated language proficiency at the operational level (Level 4) should be\nevaluated at least once every three years\n▪ Those demonstrated language proficiency at the operational level (Level 5) should be\nevaluated at least once every six years\nECAA requires level four of English language as a minimum level. All operational",
        "detail": "test._test_config",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "server = FastAPI(\n    title='IV DMS Backend',\n    description='Tuned GPT-35-TURBO-1106 Hyperparameters',\n    version=\"0.30.3\",\n    lifespan=lifespan,\n)\nserver.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_methods=['*'],",
        "detail": "main",
        "documentation": {}
    }
]